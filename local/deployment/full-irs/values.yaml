---
###########
# Install #
###########
install:
  edc:
    vault: false
    daps: false
    consumer: false
    provider: false

  digitalTwin: false
  semanticHub: false
  keycloak: false
  discovery: false

  irs:
    providerBackend: false
    backend: false
    frontend: false

##########
# COMMON #
##########
config:
  grafana:
    username: &config-grafana-username "admin"
    password: &config-grafana-password "password"
    secret:
      name: &config-grafana-secret-name irs-grafana
  minio:
    username: &config-minio-username "admin"
    password: &config-minio-password "password"
    secret:
      name: &config-minio-secret-name "irs-minio"
  vault:
    url: &config-vault-url http://edc-vault:8200
    token: &config-vault-token "root"
    secret.path: &config-vault-api-secret-path "/v1/secret"
    secret:
      name: &config-vault-secret-name edc-vault
      dataEncryptionName: &config-vault-secret-data-encryption-name "data-encryption"
      dataEncryptionValue: &config-vault-secret-data-encryption-value "H7j47H6vVQQOv/hbdAYz+w=="
      dapsCertName: &config-vault-secret-daps-cert-name "daps-cert"
      dapsCertValue: &config-vault-secret-daps-cert-value "FILL ME UP"
      dapsKeyName: &config-vault-secret-daps-key-name "daps-key"
      dapsKeyValue: &config-vault-secret-daps-key-value "FILL ME UP"
  edc:
    consumer:
      hostname:
        controlplane: &config-edc-consumer-controlplane-hostname "http://edc-consumer-control-plane:8282/api/v1/ids"
      database:
        host: &config-edc-consumer-database-host "edc-consumer-database"
        name: &config-edc-consumer-database-name "edc-consumer"
        username: &config-edc-consumer-database-username "edc-consumer-user"
        password: &config-edc-consumer-database-password "edc-consumer-pass"
        postgres:
          password: &config-edc-consumer-database-postgres-password "admin"
        secret:
          name: &config-edc-consumer-database-secret-name edc-consumer-database
    provider:
      hostname:
        controlplane: &config-edc-provider-controlplane-hostname "http://edc-provider-control-plane:8282/api/v1/ids"
      database:
        host: &config-edc-provider-database-host "edc-provider-database"
        name: &config-edc-provider-database-name "edc-provider"
        username: &config-edc-provider-database-username "edc-provider-user"
        password: &config-edc-provider-database-password "edc-provider-pass"
        postgres:
          password: &config-edc-provider-database-postgres-password "admin"
        secret:
          name: &config-edc-provider-database-secret-name edc-provider-database
    api:
      auth:
        key: &config-edc-auth-api-key "password"
  oauth:
    client:
      id:
        provider: &config-oauth-client-id-provider "edc-provider"
        consumer: &config-oauth-client-id-consumer "edc-consumer"
    provider:
      jwks:
        url: &config-oauth-jwts-url "http://edc-daps:4567/jwks.json"
    token:
      url: &config-oauth-token-url "http://edc-daps:4567/token"
  keycloak:
    grand:
      type: &config-keycloak-grand-type client_credentials
    scope: &config-keycloak-scope catena-scope

    client:
      id: &config-keycloak-client-id "catena-client-id"
      secret: &config-keycloak-client-secret "catena-client-secret"

    token:
      url: &config-keycloak-token-url "http://keycloak:8080/connect/token"
    cert:
      url: &config-keycloak-certs-url "http://keycloak:8080/.well-known/openid-configuration/jwks"
  irs:
    existingSecret: &config-irs-existingSecret false
    secret:
      name: &config-irs-secret-name "irs-backend-service"
      minio:
        user: *config-minio-username
        password: *config-minio-password
      edc:
        api:
          secret: *config-edc-auth-api-key
      grafana:
        user: *config-grafana-username
        password: *config-grafana-password
  discovery:
    host: &discovery-host "discovery:8080"

# ###########
# EDC VAULT #
# ###########
edc-vault:
  fullnameOverride: "edc-vault"
  enabled: false
  injector:
    # enabled: false
    enabled: true
    metrics:
      enabled: true
  server:
    logLevel: "trace"
    logFormat: "standard"
    dev:
      enabled: true
      devRootToken: *config-vault-token

    # Must be the same certificate that is configured in section 'ids-daps'
    extraEnvironmentVars:
      SECRET_DATA_ENCRYPTION_NAME: *config-vault-secret-data-encryption-name
      SECRET_DATA_ENCRYPTION_VALUE: *config-vault-secret-data-encryption-value
      SECRET_DAPS_CERT_NAME: *config-vault-secret-daps-cert-name
      SECRET_DAPS_CERT_VALUE: *config-vault-secret-daps-cert-value
      SECRET_DAPS_KEY_NAME: *config-vault-secret-daps-key-name
      SECRET_DAPS_KEY_VALUE: *config-vault-secret-daps-key-value
    postStart:
      - "sh"
      - "-c"
      - |
        {

        sleep 5

        /bin/vault audit enable file file_path=/tmp/vault_log.txt

        /bin/vault kv put secret/${SECRET_DATA_ENCRYPTION_NAME} content=${SECRET_DATA_ENCRYPTION_VALUE}

        cat << EOF | /bin/vault kv put secret/${SECRET_DAPS_KEY_NAME} content=-
        -----BEGIN PRIVATE KEY-----
        MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDRl5vqQTWBNDFq
        QonUKKC54cMB3CPat8Ec7yi4RnhuKdvmUX6yuDEsC4ia5wLaPQEsAiGWopjeXGDx
        NS7nxAauZC/t8R6iZ6g+APq1zS4T/Kz48c609CZ8ryEKQtLgnKSNnJBYFf7wz7iV
        blcXl4idvL8kUbucw+giKiewTgGbg8nCBn2PQ9JXWPr39LqaTt46qhaPRoZU1e9L
        WoR0EGAeuQrmwmT1m4LTQLUKlp4T3iuSapgeOwfLULOkd5bCDuvQFclnebVuLVp7
        7wEM3UsfxVaknnuKZNlig+arkhZpYOpUYQYYS7GE+/tTxP8sxIH6pVha2G/Qe7vG
        s6HQG0hTAgMBAAECggEAQHHEcA/i2rpoo0qYRJLFcMI5Cr5ci+jKSRJES/znFMBs
        K/JM6bj27ZsSQsbbOq1dSeHR4BZYuK5g5Gm85WiBwWdu0VO9XqROt9nnPLU9AMpF
        iToYm80idF4I47XOT1/6vMwyGdORkwvbrp7ByrA+QnoBr7It5LLcEn0xvOUPW3ho
        wNopAQcLre4S46tI9tjhjhDe/VOb9GclZ6pm4OLSb/dFawDaPZxFm6f7aevyS6FM
        VmQ8YsrTqDpn9VnO6UNDhrGuvtrX5ochklQ4vbXcxyk7E74DVJP0kGIXYhBBHAj3
        CdYne9S7c08qPDKbt6tMTaBB9h8O4EV0vftKf4WQEQKBgQDqZ2x1ZEKoJQc+k+BS
        hnPu8BRREEXQQHXDKiQM9RY+oLM3BfVx4NI12NWRKTcoTfV+VfcVSKcNVdAZwbC2
        ZRX/QGw1GkpcJfHb9z3BeS1OUofR55fRNLbRxQ5yCD97WtmDeTX59fU1AV6IfcFM
        NbUELadN2zI2gE35CVo9wMyvCwKBgQDk5vugYszdp56FjPjRZIpzAgoQXxhgGSNv
        xMfBqKZ4Z1MDRgk28MbFEiEp07yhCS6jdTsvGe+eslqm0lp7WiMas/SQ4JU9FkrQ
        ZyuzvnEVWICbEo+90/Rr2JNGayZa7ECZ2lPFyrPLV6nuBdwqQL53EYyWCRTz5NZ1
        Q7uJWUG42QKBgQCs9ArOw197eXbS8YF+4r3/+xzCg2M/uZAqpJldBimXpDMX0km7
        8Mqp+If8R5DvKDaPNRbOmYDJEhwuJQAiVIvafspYlEFxpH3Ec7UZYDPRqouUkXEv
        Z9nNBb0W3ocYmXwMyg7NlHGM3qnFxCQv+yDJKHZdt/JgzGK78e6nye486QKBgQCW
        fL0FLq9dMivnxUx37U+QWNDg/oP5+czwWECzsvruwY8z4cGBGz6ypT6kTw3+GRlO
        YW4tgzGj9cHfVwAhhJr7nT+2V9AFvzgkVw/GNfgGfo7eZI+Xz1cr59C7RQqMUDIQ
        dBcLPD6D+vg/Ah9CsBoIEcOJiCL8TYAozATpQYMR0QKBgQDXCWh7A45QxYn0xq0B
        iEd59YCVUoQBmRjKJzQTzN+dufjeMeLPRFvG713rnAeTzCzVwLi49ZJ3Zp0QFFWO
        vd+cmpPmX/+Eq3yAit2rlbu5AMvwJiQXxOdShT3F9sMp8iPH4B+liZEoFPJO6RgG
        UT2FhaZzgKIEWnt4aN0GvPRHdw==
        -----END PRIVATE KEY-----

        EOF

        cat << EOF | /bin/vault kv put secret/${SECRET_DAPS_CERT_NAME} content=-
        -----BEGIN CERTIFICATE-----
        MIIDazCCAlOgAwIBAgIULRtsNKCEIXeJcpBg28vr6UgyfbIwDQYJKoZIhvcNAQEL
        BQAwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoM
        GEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yMzAyMTMyMTE0NDlaFw0zMzAy
        MTAyMTE0NDlaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEw
        HwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwggEiMA0GCSqGSIb3DQEB
        AQUAA4IBDwAwggEKAoIBAQDRl5vqQTWBNDFqQonUKKC54cMB3CPat8Ec7yi4Rnhu
        KdvmUX6yuDEsC4ia5wLaPQEsAiGWopjeXGDxNS7nxAauZC/t8R6iZ6g+APq1zS4T
        /Kz48c609CZ8ryEKQtLgnKSNnJBYFf7wz7iVblcXl4idvL8kUbucw+giKiewTgGb
        g8nCBn2PQ9JXWPr39LqaTt46qhaPRoZU1e9LWoR0EGAeuQrmwmT1m4LTQLUKlp4T
        3iuSapgeOwfLULOkd5bCDuvQFclnebVuLVp77wEM3UsfxVaknnuKZNlig+arkhZp
        YOpUYQYYS7GE+/tTxP8sxIH6pVha2G/Qe7vGs6HQG0hTAgMBAAGjUzBRMB0GA1Ud
        DgQWBBRIDfz0SYxyVKHB5OqSag86ktrIODAfBgNVHSMEGDAWgBRIDfz0SYxyVKHB
        5OqSag86ktrIODAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQCX
        +hCBvBud9ph3p8FAKn1IntcmnC4H9BMDAwGM/QifgVVNRFe9hJJes2tKdVemYDk1
        kgqRoZEpTapqvLT8Iekd+h15uvP1e2BXzdwhcS67rActsbtksfL8h8q6NWXVWKQO
        9qARpzaCapIQ4BJTQnxTXlT9sqPyqnrqGQqTFoN5j71WELn3ETLeiWKwWjECkWx/
        bql3pyGKnPORP+7OF0gJDDkdS+Vwuh3S3E8g5K8osXTgqL71AIabfRvu0TDFpy0b
        /qfdxJfe5tS6sh1W8FaEgKYEyZQOVRa6wXzm8AkgaxlUcl9vVzmaoernxhn6sWCN
        95UUKv3iblFl7yB8vGmr
        -----END CERTIFICATE-----

        EOF

        }
  ui:
    enabled: true
    externalPort: 8200
    targetPort: 8200

######################
# DAPS Configuration #
######################
edc-daps:
  clients:
    - id: *config-oauth-client-id-provider
      name: *config-oauth-client-id-provider
      url: *config-edc-provider-controlplane-hostname
    - id: *config-oauth-client-id-consumer
      name: *config-oauth-client-id-consumer
      url: *config-edc-consumer-controlplane-hostname
  scope: idsc:IDS_CONNECTOR_ATTRIBUTES_ALL
  issuer: http://edc-daps:4567
  audience:
    default: idsc:IDS_CONNECTORS_ALL
    accept: http://edc-daps:4567

#########################
# EDC CONSUMER Database #
#########################
edc-consumer-database:
  fullnameOverride: "edc-consumer-database"
  primary:
    persistence:
      enabled: true
      mountPath: "/mnt/data/edc_consumer"
      size: 100Mi

  volumePermissions:
    enabled: true
  readReplicas:
    persistence:
      enabled: false
  auth:
    database: *config-edc-consumer-database-name
    username: *config-edc-consumer-database-username
    existingSecret: *config-edc-consumer-database-secret-name

  service:
    type: NodePort
    control:
      port: 5432

##############################
# EDC Consumer Control Plane #
##############################
edc-consumer-control-plane:
  edc:
    hostname: edc-consumer-control-plane
    dataPlane:
      hostname: edc-consumer-data-plane
    api:
      auth:
        key: *config-edc-auth-api-key
    vault:
      hashicorp:
        url: *config-vault-url
        token: *config-vault-token
        api:
          secret:
            path: *config-vault-api-secret-path
    oauth:
      client:
        id: *config-oauth-client-id-consumer
      provider:
        jwks:
          url: *config-oauth-jwts-url
      private:
        key:
          alias: *config-vault-secret-daps-key-name
      public:
        key:
          alias: *config-vault-secret-daps-cert-name
      token:
        url: *config-oauth-token-url
    data:
      encryption:
        keys:
          alias: "data-encryption"
        algorithm: "NONE"
    receiver:
      http:
        endpoint: http://irs:8181/internal/endpoint-data-reference
    postgresql:
      host: *config-edc-consumer-database-host
      database: *config-edc-consumer-database-name
      user: *config-edc-consumer-database-username
      password: *config-edc-consumer-database-password
    transfer:
      proxy:
        token:
          verifier:
            publickey:
              alias: *config-vault-secret-daps-cert-name
          signer:
            privatekey:
              alias: *config-vault-secret-daps-key-name

###########################
# EDC Consumer DATA Plane #
###########################
edc-consumer-data-plane:
  edc:
    dataplane:
      token:
        validation:
          endpoint: http://edc-consumer-control-plane:8182/validation/token
    api:
      auth:
        key: *config-edc-auth-api-key
    oauth:
      client:
        id: *config-oauth-client-id-consumer
      private:
        key:
          alias: *config-vault-secret-daps-key-name
      public:
        key:
          alias: *config-vault-secret-daps-cert-name
      provider:
        jwks:
          url: *config-oauth-jwts-url
      token:
        url: *config-oauth-token-url
    vault:
      hashicorp:
        url: *config-vault-url
        token: *config-vault-token
        api:
          secret:
            path: *config-vault-api-secret-path

#########################
# EDC PROVIDER Database #
#########################
edc-provider-database:
  fullnameOverride: "edc-provider-database"
  primary:
    persistence:
      enabled: true
      mountPath: "/mnt/data/edc_provider"
      size: 500Mi
  volumePermissions:
    enabled: true
  readReplicas:
    persistence:
      enabled: false
  auth:
    database: *config-edc-provider-database-name
    username: *config-edc-provider-database-username
    existingSecret: *config-edc-provider-database-secret-name
  service:
    type: NodePort
    control:
      port: 5432

##############################
# EDC Provider Control Plane #
##############################
edc-provider-control-plane:
  edc:
    hostname: edc-provider-control-plane
    dataPlane:
      hostname: edc-provider-data-plane
    api:
      auth:
        key: *config-edc-auth-api-key
    vault:
      hashicorp:
        url: *config-vault-url
        token: *config-vault-token
        api:
          secret:
            path: *config-vault-api-secret-path
    oauth:
      client:
        id: *config-oauth-client-id-provider
      provider:
        jwks:
          url: *config-oauth-jwts-url
      private:
        key:
          alias: *config-vault-secret-daps-key-name
      public:
        key:
          alias: *config-vault-secret-daps-cert-name
      token:
        url: *config-oauth-token-url
    data:
      encryption:
        keys:
          alias: "data-encryption"
    receiver:
      http:
        endpoint: http://irs:8181/internal/endpoint-data-reference
    postgresql:
      host: *config-edc-provider-database-host
      database: *config-edc-provider-database-name
      user: *config-edc-provider-database-username
      password: *config-edc-provider-database-password
    transfer:
      proxy:
        token:
          verifier:
            publickey:
              alias: *config-vault-secret-daps-cert-name
          signer:
            privatekey:
              alias: *config-vault-secret-daps-key-name

###########################
# EDC Provider DATA Plane #
###########################
edc-provider-data-plane:
  edc:
    dataplane:
      token:
        validation:
          endpoint: http://edc-provider-control-plane:8182/validation/token
    api:
      auth:
        key: *config-edc-auth-api-key
    oauth:
      client:
        id: *config-oauth-client-id-provider
      private:
        key:
          alias: *config-vault-secret-daps-key-name
      public:
        key:
          alias: *config-vault-secret-daps-cert-name
      provider:
        jwks:
          url: *config-oauth-jwts-url
      token:
        url: *config-oauth-token-url
    vault:
      hashicorp:
        url: *config-vault-url
        token: *config-vault-token
        api:
          secret:
            path: *config-vault-api-secret-path

################
# Semantic Hub #
################
semantic-hub:
  fullnameOverride: "semantic-hub"

#########################
# Digital Twin Registry #
#########################
digital-twin-registry:
  enableKeycloak: false
  registry:
    authentication: false
  postgresql:
    primary:
      persistence:
        enabled: true
        size: 200Mi
  auth:
    username: default-user
    password: password
    database: default-database

############
# KeyCloak #
############
keycloak:
  fullnameOverride: "keycloak"
  client:
    id: *config-keycloak-client-id
    secret: *config-keycloak-client-secret
  grand:
    type: *config-keycloak-grand-type
  scope: *config-keycloak-scope

#####################
# IRS Configuration #
#####################
irs:
  enabled: false
  minioUser: *config-minio-username
  minioPassword: *config-minio-password
  minioUrl: "http://{{ .Release.Name }}-minio:9000"

  config:
    override: false

  irsUrl: http://{{ .Chart.Name }}:{{ .Values.service.port }}

  blobstore:
    endpoint: "http://irs-minio:9000"
    accessKey: "${MINIO_ACCESS_KEY}"
    secretKey: "${MINIO_SECRET_KEY}"
  policystore:
    persistence:
      endpoint: "http://irs-minio:9000"
      accessKey: "${MINIO_ACCESS_KEY}"
      secretKey: "${MINIO_SECRET_KEY}"
  keycloak:
    oauth2:
      clientId: *config-keycloak-client-id
      clientSecret: *config-keycloak-client-secret
      clientTokenUri: *config-keycloak-token-url
      jwkSetUri: *config-keycloak-certs-url

  digitalTwinRegistry:
    url: "http://cx-irs-dependencies-registry-svc:8080"
    descriptorEndpoint: "{{ tpl .Values.digitalTwinRegistry.url . }}/api/v3.0/shell-descriptors/{aasIdentifier}"
    shellLookupEndpoint: "{{ tpl .Values.digitalTwinRegistry.url . }}/api/v3.0/lookup/shells?assetIds={assetIds}"
  semanticshub:
    url: http://semantic-hub:8080/hub/api/v1/models
    defaultUrns: >-
      urn:bamm:io.catenax.serial_part_typization:1.0.0#SerialPartTypization
    localModels:

  bpdm:
    url: ""
    bpnEndpoint: "{{ tpl .Values.bpdm.url . }}/api/catena/legal-entities/{partnerId}?idType={idType}"

  edc:
    controlplane:
      endpoint:
        data: "http://edc-consumer-control-plane:8181/api/v1/management"
      request:
        ttl: PT10M
      provider:
        suffix: /api/v1/ids/data
      catalog:
        limit: 1000
      apikey:
        header: "X-Api-Key"
        secret: *config-edc-auth-api-key
    submodel:
      request:
        ttl: PT10M
      path: /submodel
      urnprefix: /urn

  minio:
    enabled: false
    mode: standalone
    persistence:
      enabled: true
      size: 100Mi
    resources:
      requests:
        memory: 4Gi

    rootUser: *config-minio-username
    rootPassword: *config-minio-password

    environment:
      MINIO_PROMETHEUS_JOB_ID: minio-actuator
      MINIO_PROMETHEUS_URL: http://{{ .Release.Name }}-prometheus-server:9090

  prometheus:
    enabled: false
    rbac:
      create: false
    alertmanager:
      enabled: false
    prometheus-node-exporter:
      enabled: false
    kubeStateMetrics:
      enabled: false
    prometheus-pushgateway:
      enabled: false
    configmapReload:
      prometheus:
        enabled: false

    extraScrapeConfigs: |
      - job_name: 'spring-actuator'
        metrics_path: '/actuator/prometheus'
        scrape_interval: 5s
        static_configs:
          - targets: [ '{{ .Release.Name }}-irs-helm:4004' ]

      - job_name: 'minio-actuator'
        metrics_path: /minio/v2/metrics/cluster
        static_configs:
          - targets: [ '{{ .Release.Name }}-minio:9000' ]

  grafana:
    enabled: false
    rbac:
      create: false
    persistence:
      enabled: true
      existingClaim: "grafana-pv-claim"

    user: *config-grafana-username
    password: *config-grafana-password

    admin:
      existingSecret: *config-grafana-secret-name

    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            url: "http://{{ .Release.Name }}-prometheus-server"
            isDefault: true
    sidecar:
      dashboards:
        enabled: true

    importDashboards:
      minio: dashboards/minio-dashboard.json
      outbound: dashboards/irs-outbound-requests.json
      irsmonitoring: dashboards/resource-monitoring-dashboard.json
      irsjobs: dashboards/irs-jobs-dashboard.json
      irsapi: dashboards/irs-api-dashboard.json

################
# IRS Frontend #
################
irs-frontend:
  registry:
    default:
      global:
        asset:
          id: urn:uuid:d3c0bf85-d44f-47c5-990d-fec8a36065c6
    vite:
      manual:
        url: https://github.com/catenax-ng/product-item-relationship-service-frontend/blob/main/docs/userManual.md
    url:
      local: http://localhost:8080
  keycloak:
    url: http://localhost:4011/connect/token
    grand:
      type: *config-keycloak-grand-type
    scope: *config-keycloak-scope
    client:
      id: *config-keycloak-client-id
      secret: *config-keycloak-client-secret

#####################
# Discovery Service #
#####################
discovery:
  ingress:
    enabled: false
  wiremock:
    host: *discovery-host
