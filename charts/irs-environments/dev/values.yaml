item-relationship-service:
  #####################
  # IRS Configuration #
  #####################
  irsUrl: "https://irs.dev.demo.catena-x.net"
  bpn: <path:traceability-irs/data/dev/irs#bpn>
  apiKeyAdmin: <path:traceability-irs/data/dev/irs#apiKeyAdmin>
  apiKeyRegular: <path:traceability-irs/data/dev/irs#apiKeyRegular>
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - host: "irs.dev.demo.catena-x.net"
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
          - "irs.dev.demo.catena-x.net"
        secretName: tls-secret
  management:
    health:
      dependencies:
        enabled: "false"
        urls:
          bpdmService: https://partners-pool.int.demo.catena-x.net/ui/swagger-ui/index.html
          dtrService: http://cx-irs-registry-registry-svc:4243/actuator/health/liveness
          consumerControlPlane: http://irs-dev-tractusx-connector-controlplane:8080/api/check/liveness
          controlPlane: http://irs-provider-tractusx-connector-controlplane:8080/api/check/liveness
          controlPlane2: http://irs-provider2-tractusx-connector-controlplane:8080/api/check/liveness
          controlPlane3: http://irs-provider3-tractusx-connector-controlplane:8080/api/check/liveness
  digitalTwinRegistry:
    url: https://irs-aas-registry.dev.demo.catena-x.net/semantics/registry/api/v3
    shellDescriptorTemplate: /shell-descriptors/{aasIdentifier}
    lookupShellsTemplate: /lookup/shells?assetIds={assetIds}
  discovery:
    discoveryFinderUrl: https://discovery-mock.dev.demo.catena-x.net/api/administration/connectors/discovery/search

  semanticshub:
    # url: https://semantics.int.demo.catena-x.net/hub/api/v1/models
    localModels:
      # urn:samm:io.catenax.single_level_bom_as_planned:3.0.0#SingleLevelBomAsPlanned
      dXJuOnNhbW06aW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfYm9tX2FzX3BsYW5uZWQ6My4wLjAjU2luZ2xlTGV2ZWxCb21Bc1BsYW5uZWQ: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIlRoZSBzaW5nbGUtbGV2ZWwgYmlsbCBvZiBtYXRlcmlhbCAoQm9NKXJlcHJlc2VudHMgb25lIHN1Yi1sZXZlbCBvZiBhbiBhc3NlbWJseSBhbmQgZG9lcyBub3QgaW5jbHVkZSBhbnkgbG93ZXItbGV2ZWwgc3ViYXNzZW1ibGllcy4gSW4gdGhlIEFzLVBsYW5uZWQgbGlmZWN5Y2xlIHN0YXRlIGFsbCB2YXJpYW50cyBhcmUgY292ZXJlZCAoXCIxMjAlIEJvTVwiKS5cbklmIG11bHRpcGxlIHZlcnNpb25zIG9mIGNoaWxkIHBhcnRzIGV4aXN0IHRoYXQgY2FuIGJlIGFzc2VtYmxlZCBpbnRvIHRoZSBzYW1lIHBhcmVudCBwYXJ0LCBhbGwgdmVyc2lvbnMgb2YgdGhlIGNoaWxkIHBhcnQgYXJlIGluY2x1ZGVkIGluIHRoZSBCb00uXG5JZiB0aGVyZSBhcmUgbXVsdGlwbGUgc3VwcGxpZXJzIGZvciB0aGUgc2FtZSBjaGlsZCBwYXJ0LCBlYWNoIHN1cHBsaWVyIGhhcyBhbiBlbnRyeSBmb3IgdGhlaXIgY2hpbGQgcGFydCBpbiB0aGUgQm9NLiIsDQogICJ0eXBlIiA6ICJvYmplY3QiLA0KICAiY29tcG9uZW50cyIgOiB7DQogICAgInNjaGVtYXMiIDogew0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnV1aWRfMi4wLjBfVXVpZFY0VHJhaXQiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgcHJvdmlkZWQgcmVndWxhciBleHByZXNzaW9uIGVuc3VyZXMgdGhhdCB0aGUgVVVJRCBpcyBjb21wb3NlZCBvZiBmaXZlIGdyb3VwcyBvZiBjaGFyYWN0ZXJzIHNlcGFyYXRlZCBieSBoeXBoZW5zLCBpbiB0aGUgZm9ybSA4LTQtNC00LTEyIGZvciBhIHRvdGFsIG9mIDM2IGNoYXJhY3RlcnMgKDMyIGhleGFkZWNpbWFsIGNoYXJhY3RlcnMgYW5kIDQgaHlwaGVucyksIG9wdGlvbmFsbHkgcHJlZml4ZWQgYnkgXCJ1cm46dXVpZDpcIiB0byBtYWtlIGl0IGFuIElSSS4iLA0KICAgICAgICAicGF0dGVybiIgOiAiKF5bMC05YS1mQS1GXXs4fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXsxMn0kKXwoXnVybjp1dWlkOlswLTlhLWZBLUZdezh9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezEyfSQpIg0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNpbmdsZV9sZXZlbF9ib21fYXNfcGxhbm5lZF8zLjAuMF9EYXRlVGltZVRyYWl0IiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiUmVndWxhciBFeHByZXNzaW9uIHRvIGVuYWJsZSBVVEMgYW5kIFRpbWV6b25lIGZvcm1hdHMgYW5kIHRoZSBwb3NzaWJpbGl0eSB0byBleGNsdWRlIHRpbWUgaW5mb3JtYXRpb24uIiwNCiAgICAgICAgInBhdHRlcm4iIDogIl4tPyhbMS05XVswLTldezMsfXwwWzAtOV17M30pLSgwWzEtOV18MVswLTJdKS0oMFsxLTldfFsxMl1bMC05XXwzWzAxXSkoVCgoWzAxXVswLTldfDJbMC0zXSk6WzAtNV1bMC05XTpbMC01XVswLTldKFxcLlswLTldKyk/fCgyNDowMDowMChcXC4wKyk/KSkoWnwoXFwrfC0pKCgwWzAtOV18MVswLTNdKTpbMC01XVswLTldfDE0OjAwKSk/KT8kIg0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5xdWFudGl0eV8yLjAuMF9RdWFudGl0eVZhbHVlQ2hhcmFjdGVyaXN0aWMiIDogew0KICAgICAgICAidHlwZSIgOiAibnVtYmVyIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgcXVhbnRpdHkgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSB1bml0IGV4cHJlc3NlZCBhcyBmbG9hdC4iDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnF1YW50aXR5XzIuMC4wX0l0ZW1Vbml0RW51bWVyYXRpb24iIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgInBhdHRlcm4iIDogIlthLXpBLVpdKjpbYS16QS1aXSsiLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkVudW1lcmF0aW9uIGZvciBjb21tb24gaXRlbSB1bml0cy4iLA0KICAgICAgICAiZW51bSIgOiBbICJ1bml0OnBpZWNlIiwgInVuaXQ6c2V0IiwgInVuaXQ6cGFpciIsICJ1bml0OnBhZ2UiLCAidW5pdDpjeWNsZSIsICJ1bml0OmtpbG93YXR0SG91ciIsICJ1bml0OmdyYW0iLCAidW5pdDpraWxvZ3JhbSIsICJ1bml0OnRvbm5lTWV0cmljVG9uIiwgInVuaXQ6dG9uVXNPclNob3J0VG9uVWtvcnVzIiwgInVuaXQ6b3VuY2VBdm9pcmR1cG9pcyIsICJ1bml0OnBvdW5kIiwgInVuaXQ6bWV0cmUiLCAidW5pdDpjZW50aW1ldHJlIiwgInVuaXQ6a2lsb21ldHJlIiwgInVuaXQ6aW5jaCIsICJ1bml0OmZvb3QiLCAidW5pdDp5YXJkIiwgInVuaXQ6c3F1YXJlQ2VudGltZXRyZSIsICJ1bml0OnNxdWFyZU1ldHJlIiwgInVuaXQ6c3F1YXJlSW5jaCIsICJ1bml0OnNxdWFyZUZvb3QiLCAidW5pdDpzcXVhcmVZYXJkIiwgInVuaXQ6Y3ViaWNDZW50aW1ldHJlIiwgInVuaXQ6Y3ViaWNNZXRyZSIsICJ1bml0OmN1YmljSW5jaCIsICJ1bml0OmN1YmljRm9vdCIsICJ1bml0OmN1YmljWWFyZCIsICJ1bml0OmxpdHJlIiwgInVuaXQ6bWlsbGlsaXRyZSIsICJ1bml0OmhlY3RvbGl0cmUiLCAidW5pdDpzZWNvbmRVbml0T2ZUaW1lIiwgInVuaXQ6bWludXRlVW5pdE9mVGltZSIsICJ1bml0OmhvdXJVbml0T2ZUaW1lIiwgInVuaXQ6ZGF5IiBdDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnF1YW50aXR5XzIuMC4wX0l0ZW1RdWFudGl0eUNoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDaGFyYWN0ZXJpc3RpYyBmb3IgbWVhc3VyZW1lbnRzIG9mIGFuIGl0ZW0gKG1hc3MsIGNvdW50LCBsaW5lYXIsIGFyZWEsIHZvbHVtZSwgbWlzYykuIiwNCiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsDQogICAgICAgICJwcm9wZXJ0aWVzIiA6IHsNCiAgICAgICAgICAidmFsdWUiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgcXVhbnRpdHkgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSB1bml0LiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zaGFyZWQucXVhbnRpdHlfMi4wLjBfUXVhbnRpdHlWYWx1ZUNoYXJhY3RlcmlzdGljIg0KICAgICAgICAgIH0sDQogICAgICAgICAgInVuaXQiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdW5pdCBvZiBhbiBpdGVtLiBDb21tb24gdW5pdHMgbWF5IGJlIHJlbGF0ZWQgdG8gbWFzcywgY291bnQsIGxpbmVhciwgYXJlYSwgdm9sdW1lIG9yIG1pc2MuIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5xdWFudGl0eV8yLjAuMF9JdGVtVW5pdEVudW1lcmF0aW9uIg0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgInJlcXVpcmVkIiA6IFsgInZhbHVlIiwgInVuaXQiIF0NCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfYm9tX2FzX3BsYW5uZWRfMy4wLjBfVmFsaWRpdHlQZXJpb2RDaGFyYWN0ZXJpc3RpYyIgOiB7DQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQ2hhcmFjdGVyaXN0aWMgZm9yIGEgdmFsaWRpdHkgcGVyaW9kIGRlZmluZWQgYnkgYW4gKG9wdGlvbmFsKXN0YXJ0IGFuZCBhbiAob3B0aW9uYWwpZW5kIHRpbWVzdGFtcC4iLA0KICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwNCiAgICAgICAgInByb3BlcnRpZXMiIDogew0KICAgICAgICAgICJ2YWxpZEZyb20iIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTdGFydCBkYXRlIG9mIHZhbGlkaXR5IHBlcmlvZC4iLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2luZ2xlX2xldmVsX2JvbV9hc19wbGFubmVkXzMuMC4wX0RhdGVUaW1lVHJhaXQiDQogICAgICAgICAgfSwNCiAgICAgICAgICAidmFsaWRUbyIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkVuZCBkYXRlIG9mIHZhbGlkaXR5IHBlcmlvZC4iLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2luZ2xlX2xldmVsX2JvbV9hc19wbGFubmVkXzMuMC4wX0RhdGVUaW1lVHJhaXQiDQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLmJ1c2luZXNzX3BhcnRuZXJfbnVtYmVyXzIuMC4wX0JwbmxUcmFpdCIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwcm92aWRlZCByZWd1bGFyIGV4cHJlc3Npb24gZW5zdXJlcyB0aGF0IHRoZSBCUE5MIGlzIGNvbXBvc2VkIG9mIHByZWZpeCAnQlBOTCcsIDEwIGRpZ2l0cyBhbmQgdHdvIGFscGhhbnVtZXJpYyBsZXR0ZXJzLiIsDQogICAgICAgICJwYXR0ZXJuIiA6ICJeQlBOTFthLXpBLVowLTldezEyfSQiDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2luZ2xlX2xldmVsX2JvbV9hc19wbGFubmVkXzMuMC4wX0NoaWxkRGF0YSIgOiB7DQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQ2F0ZW5hLVggSUQgYW5kIG1ldGEgZGF0YSBvZiB0aGUgYXNzZW1ibGVkIGNoaWxkIGl0ZW0uIiwNCiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsDQogICAgICAgICJwcm9wZXJ0aWVzIiA6IHsNCiAgICAgICAgICAiY3JlYXRlZE9uIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGltZXN0YW1wIHdoZW4gdGhlIHJlbGF0aW9uIGJldHdlZW4gdGhlIHBhcmVudCBwYXJ0IGFuZCB0aGUgY2hpbGQgcGFydCB3YXMgY3JlYXRlZCIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfYm9tX2FzX3BsYW5uZWRfMy4wLjBfRGF0ZVRpbWVUcmFpdCINCiAgICAgICAgICB9LA0KICAgICAgICAgICJxdWFudGl0eSIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlF1YW50aXR5IG9mIHdoaWNoIHRoZSBjaGlsZCBwYXJ0IHdpbGwgYmUgYXNzZW1ibGVkIGludG8gdGhlIHBhcmVudCBwYXJ0LiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zaGFyZWQucXVhbnRpdHlfMi4wLjBfSXRlbVF1YW50aXR5Q2hhcmFjdGVyaXN0aWMiDQogICAgICAgICAgfSwNCiAgICAgICAgICAibGFzdE1vZGlmaWVkT24iIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaW1lc3RhbXAgd2hlbiB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gcGFyZW50IHBhcnQgYW5kIGNoaWxkIHBhcnQgd2FzIGxhc3QgbW9kaWZpZWQuIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNpbmdsZV9sZXZlbF9ib21fYXNfcGxhbm5lZF8zLjAuMF9EYXRlVGltZVRyYWl0Ig0KICAgICAgICAgIH0sDQogICAgICAgICAgInZhbGlkaXR5UGVyaW9kIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHBlcmlvZCBvZiB0aW1lIGR1cmluZyB3aGljaCB0aGUgcGFyZW50LWNoaWxkIHJlbGF0aW9uIGlzIHZhbGlkLiBUaGlzIHJlbGF0ZXMgdG8gd2hldGhlciBhIGNoaWxkIHBhcnQgY2FuIGJlIGJ1aWx0IGludG8gdGhlIHBhcmVudCBwYXJ0IGF0IGEgZ2l2ZW4gdGltZS5cbklmIG5vIHZhbGlkaXR5IHBlcmlvZCBpcyBnaXZlbiB0aGUgcmVsYXRpb24gaXMgY29uc2lkZXJlZCB2YWxpZCBhdCBhbnkgcG9pbnQgaW4gdGltZS4iLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2luZ2xlX2xldmVsX2JvbV9hc19wbGFubmVkXzMuMC4wX1ZhbGlkaXR5UGVyaW9kQ2hhcmFjdGVyaXN0aWMiDQogICAgICAgICAgfSwNCiAgICAgICAgICAiYnVzaW5lc3NQYXJ0bmVyIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHN1cHBsaWVyIG9mIHRoZSBnaXZlbiBjaGlsZCBpdGVtLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zaGFyZWQuYnVzaW5lc3NfcGFydG5lcl9udW1iZXJfMi4wLjBfQnBubFRyYWl0Ig0KICAgICAgICAgIH0sDQogICAgICAgICAgImNhdGVuYVhJZCIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBDYXRlbmEtWCBJRCBvZiB0aGUgZ2l2ZW4gcGFydCAoZS5nLiB0aGUgY29tcG9uZW50KSwgdmFsaWQgZm9yIHRoZSBDYXRlbmEtWCBkYXRhc3BhY2UuIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC51dWlkXzIuMC4wX1V1aWRWNFRyYWl0Ig0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgInJlcXVpcmVkIiA6IFsgImNyZWF0ZWRPbiIsICJxdWFudGl0eSIsICJidXNpbmVzc1BhcnRuZXIiLCAiY2F0ZW5hWElkIiBdDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2luZ2xlX2xldmVsX2JvbV9hc19wbGFubmVkXzMuMC4wX1NldE9mQ2hpbGRJdGVtc0NoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTZXQgb2YgY2hpbGQgaXRlbXMgdGhlIHBhcmVudCBvYmplY3Qgd2lsbCBiZSBhc3NlbWJsZWQgYnkgKG9uZSBzdHJ1Y3R1cmFsIGxldmVsIGRvd24pLiIsDQogICAgICAgICJ0eXBlIiA6ICJhcnJheSIsDQogICAgICAgICJpdGVtcyIgOiB7DQogICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2luZ2xlX2xldmVsX2JvbV9hc19wbGFubmVkXzMuMC4wX0NoaWxkRGF0YSINCiAgICAgICAgfSwNCiAgICAgICAgInVuaXF1ZUl0ZW1zIiA6IHRydWUNCiAgICAgIH0NCiAgICB9DQogIH0sDQogICJwcm9wZXJ0aWVzIiA6IHsNCiAgICAiY2F0ZW5hWElkIiA6IHsNCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIENhdGVuYS1YIElEIG9mIHRoZSBnaXZlbiBwYXJ0IChlLmcuIHRoZSBjb21wb25lbnQpLCB2YWxpZCBmb3IgdGhlIENhdGVuYS1YIGRhdGFzcGFjZS4iLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnV1aWRfMi4wLjBfVXVpZFY0VHJhaXQiDQogICAgfSwNCiAgICAiY2hpbGRJdGVtcyIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIlNldCBvZiBjaGlsZCBpdGVtcyBpbiBBcy1QbGFubmVkIGxpZmVjeWNsZSBwaGFzZSwgb2Ygd2hpY2ggdGhlIGdpdmVuIHBhcmVudCBvYmplY3QgaXMgYXNzZW1ibGVkIGJ5IChvbmUgc3RydWN0dXJhbCBsZXZlbCBkb3duKS4iLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2luZ2xlX2xldmVsX2JvbV9hc19wbGFubmVkXzMuMC4wX1NldE9mQ2hpbGRJdGVtc0NoYXJhY3RlcmlzdGljIg0KICAgIH0NCiAgfSwNCiAgInJlcXVpcmVkIiA6IFsgImNhdGVuYVhJZCIsICJjaGlsZEl0ZW1zIiBdDQp9
      # urn:samm:io.catenax.part_as_planned:2.0.0#PartAsPlanned
      dXJuOnNhbW06aW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWQ6Mi4wLjAjUGFydEFzUGxhbm5lZA: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIkEgUGFydCBhcyBQbGFubmVkIHJlcHJlc2VudHMgYW4gaXRlbSBpbiB0aGUgQ2F0ZW5hLVggQmlsbCBvZiBNYXRlcmlhbChCT00pIGluIEFzLVBsYW5uZWQgbGlmZWN5Y2xlIHN0YXR1cyBpbiBhIHNwZWNpZmljIHZlcnNpb24uICIsDQogICJ0eXBlIiA6ICJvYmplY3QiLA0KICAiY29tcG9uZW50cyIgOiB7DQogICAgInNjaGVtYXMiIDogew0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnV1aWRfMS4wLjBfVXVpZFY0VHJhaXQiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgcHJvdmlkZWQgcmVndWxhciBleHByZXNzaW9uIGVuc3VyZXMgdGhhdCB0aGUgVVVJRCBpcyBjb21wb3NlZCBvZiBmaXZlIGdyb3VwcyBvZiBjaGFyYWN0ZXJzIHNlcGFyYXRlZCBieSBoeXBoZW5zLCBpbiB0aGUgZm9ybSA4LTQtNC00LTEyIGZvciBhIHRvdGFsIG9mIDM2IGNoYXJhY3RlcnMgKDMyIGhleGFkZWNpbWFsIGNoYXJhY3RlcnMgYW5kIDQgaHlwaGVucyksIG9wdGlvbmFsbHkgcHJlZml4ZWQgYnkgXCJ1cm46dXVpZDpcIiB0byBtYWtlIGl0IGFuIElSSS4iLA0KICAgICAgICAicGF0dGVybiIgOiAiKF5bMC05YS1mQS1GXXs4fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXsxMn0kKXwoXnVybjp1dWlkOlswLTlhLWZBLUZdezh9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezEyfSQpIg0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8yLjAuMF9QYXJ0SWRDaGFyYWN0ZXJpc3RpYyIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwYXJ0IElEIGlzIGEgbXVsdGktY2hhcmFjdGVyIHN0cmluZywgdXN1YWxseSBhc3NpZ25lZCBieSBhbiBFUlAgc3lzdGVtIg0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8yLjAuMF9QYXJ0TmFtZUNoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiUGFydCBOYW1lIGluIHN0cmluZyBmb3JtYXQgZnJvbSB0aGUgcmVzcGVjdGl2ZSBzeXN0ZW0gaW4gdGhlIHZhbHVlIGNoYWluIg0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8yLjAuMF9DbGFzc2lmaWNhdGlvbkVudW1lcmF0aW9uQ2hhcmFjdGVyaXN0aWMiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIHBhcnQgdHlwZSBtdXN0IGJlIHBsYWNlZCBpbnRvIG9uZSBvZiB0aGUgZm9sbG93aW5nIGNsYXNzZXM6ICdjb21wb25lbnQnLCAncHJvZHVjdCcsICdzb2Z0d2FyZScsID9hc3NlbWJseT8sICd0b29sJywgb3IgJ3JhdyBtYXRlcmlhbCcuIiwNCiAgICAgICAgImVudW0iIDogWyAicHJvZHVjdCIsICJyYXcgbWF0ZXJpYWwiLCAic29mdHdhcmUiLCAiYXNzZW1ibHkiLCAidG9vbCIsICJjb21wb25lbnQiIF0NCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWRfMi4wLjBfUGFydFR5cGVJbmZvcm1hdGlvbkNoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgY2hhcmFjdGVyaXN0aWNzIG9mIHRoZSBwYXJ0IHR5cGUiLA0KICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwNCiAgICAgICAgInByb3BlcnRpZXMiIDogew0KICAgICAgICAgICJtYW51ZmFjdHVyZXJQYXJ0SWQiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJQYXJ0IElEIGFzIGFzc2lnbmVkIGJ5IHRoZSBtYW51ZmFjdHVyZXIgb2YgdGhlIHBhcnQuIFRoZSBQYXJ0IElEIGlkZW50aWZpZXMgdGhlIHBhcnQgaW4gdGhlIG1hbnVmYWN0dXJlcmBzIGRhdGFzcGFjZS4gVGhlIFBhcnQgSUQgcmVmZXJlbmNlcyBhIHNwZWNpZmljIHZlcnNpb24gb2YgYSBwYXJ0LiBUaGUgdmVyc2lvbiBudW1iZXIgbXVzdCBiZSBpbmNsdWRlZCBpbiB0aGUgUGFydCBJRCBpZiBpdCBpcyBhdmFpbGFibGUuXG5cblRoZSBQYXJ0IElEIGRvZXMgbm90IHJlZmVyZW5jZSBhIHNwZWNpZmljIGluc3RhbmNlIG9mIGEgcGFydCBhbmQgbXVzdCBub3QgYmUgY29uZnVzZWQgd2l0aCB0aGUgc2VyaWFsIG51bWJlci4iLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXgucGFydF9hc19wbGFubmVkXzIuMC4wX1BhcnRJZENoYXJhY3RlcmlzdGljIg0KICAgICAgICAgIH0sDQogICAgICAgICAgIm5hbWVBdE1hbnVmYWN0dXJlciIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIk5hbWUgb2YgdGhlIHBhcnQgYXMgYXNzaWduZWQgYnkgdGhlIG1hbnVmYWN0dXJlciIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWRfMi4wLjBfUGFydE5hbWVDaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9LA0KICAgICAgICAgICJjbGFzc2lmaWNhdGlvbiIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBjbGFzc2lmaWNhdGlvbiBvZiB0aGUgcGFydCB0eXBlIGFjY29yZGluZyB0byBTVEVQIHN0YW5kYXJkIGRlZmluaXRpb24iLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXgucGFydF9hc19wbGFubmVkXzIuMC4wX0NsYXNzaWZpY2F0aW9uRW51bWVyYXRpb25DaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgICJyZXF1aXJlZCIgOiBbICJtYW51ZmFjdHVyZXJQYXJ0SWQiLCAibmFtZUF0TWFudWZhY3R1cmVyIiwgImNsYXNzaWZpY2F0aW9uIiBdDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLmJ1c2luZXNzX3BhcnRuZXJfbnVtYmVyXzEuMC4wX0JwbnNDaGFyYWN0ZXJpc3RpYyIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkJQTlMgKEJ1c2luZXNzIFBhcnRuZXIgTnVtYmVyIFNpdGUpIHJlcHJlc2VudHMgYSBzaXRlIHdoaWNoIGNhbiBiZSBhIHByb2R1Y3Rpb24gcGxhbnQuIEEgc2l0ZSBjYW4gYWxzbyBiZSBlLmcuIGFuIG9mZmljZSBvciBhIHdhcmVob3VzZS4gQW4gaW5mb3JtYXRpb24gcmVsYXRlZCB0byBhIHNpdGUgaXMgZS5nLiBuZWVkZWQgZm9yIHJlcG9ydGluZyBpc3N1ZXMgKEhvdyBtYW55IHNpdGVzIGRvZXMgZS5nLiBCZWlzcGllbCBBRyBoYXZlPyksIHN0YXR1cyBvZiBvcGVyYXRpb24gKG91dCBvZiBvcGVyYXRpb25zIGR1ZSB0byBlbnZpcm9ubWVudGFsIGRpc2FzdGVyKSwgZm9yIGNlcnRpZmljYXRlcyBvbiBzaXRlIGxldmVsIChlLmcuIGVudmlyb25tZW50IGNlcnRpZmljYXRlcykgb3IgZm9yIGludGVybmFsIHJlZ3VsYXRpb25zIG9uIHNpdGUgbGV2ZWwsIChlLmcuIHNlY3VyaXR5IHRvcGljcywgQ29yb25hIHJ1bGVzLC4uLikuIFNldmVyYWwgYWRkcmVzc2VzICg9IEJQTkEgd2l0aCBkaWZmZXJlbnQgc3RyZWV0cyBhbmQgZGlmZmVyZW50IGdhdGVzKSBjYW4gYmVsb25nIHRvIG9uZSBzaXRlLiBBIEJQTlMgc2hvdWxkIGJlIGFsd2F5cyBsaW5rZWQgdG8gb25lIEJQTkwgdmlhIHJlbGF0aW9uc2hpcCAnYmVsb25ncyB0byBsZWdhbCBlbnRpdHknLiINCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWRfMi4wLjBfRnVuY3Rpb25DaGFyYWN0ZXJpc3RpYyIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkRlc2NyaWJlcyB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIHRoZSBmdW5jdGlvbiBmb3IgYSBzaXRlIHJlbGF0ZWQgdG8gdGhlIHJlc3BlY3RpdmUgcGFydCIsDQogICAgICAgICJlbnVtIiA6IFsgInByb2R1Y3Rpb24iLCAid2FyZWhvdXNlIiwgInNwYXJlIHBhcnQgd2FyZWhvdXNlIiBdDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX29yZy5lY2xpcHNlLmVzbWYuc2FtbV9jaGFyYWN0ZXJpc3RpY18yLjEuMF9UaW1lc3RhbXAiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgInBhdHRlcm4iIDogIi0/KFsxLTldWzAtOV17Myx9fDBbMC05XXszfSktKDBbMS05XXwxWzAtMl0pLSgwWzEtOV18WzEyXVswLTldfDNbMDFdKVQoKFswMV1bMC05XXwyWzAtM10pOlswLTVdWzAtOV06WzAtNV1bMC05XShcXC5bMC05XSspP3woMjQ6MDA6MDAoXFwuMCspPykpKFp8KFxcK3wtKSgoMFswLTldfDFbMC0zXSk6WzAtNV1bMC05XXwxNDowMCkpPyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzY3JpYmVzIGEgUHJvcGVydHkgd2hpY2ggY29udGFpbnMgdGhlIGRhdGUgYW5kIHRpbWUgd2l0aCBhbiBvcHRpb25hbCB0aW1lem9uZS4iDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXgucGFydF9hc19wbGFubmVkXzIuMC4wX3BhcnRTaXRlc0luZm9ybWF0aW9uQXNQbGFubmVkRW50aXR5IiA6IHsNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJEZXNjcmliZXMgdGhlIElELCBmdW5jdGlvbiBhbmQgdmFsaWRpdHkgZGF0ZSBvZiBhIHNpdGUgZm9yIHRoZSBhc3NvY2lhdGVkIHBhcnQgaW4gdGhlIEFzUGxhbm5lZCBjb250ZXh0LiIsDQogICAgICAgICJ0eXBlIiA6ICJvYmplY3QiLA0KICAgICAgICAicHJvcGVydGllcyIgOiB7DQogICAgICAgICAgImNhdGVuYVhzaXRlSWQiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgaWRlbnRpZmllciBvZiB0aGUgc2l0ZSBhY2NvcmRpbmcgdG8gQ2F0ZW5hLVggQlBETS4gVGhlIGNhdGVuYVhzaXRlSWQgbXVzdCBiZSBhIHZhbGlkIENhdGVuYS1YIEJQTi4gVGhlIEJQTiBpcyBhIHVuaXF1ZSwgdW5jaGFuZ2VhYmxlIGlkZW50aWZpZXIgZm9yIEJ1c2luZXNzIFBhcnRuZXJzIC8gY29tcGFueSBsb2NhdGlvbnMgZnJvbSBmb3VuZGF0aW9uIHRvIGNsb3N1cmUsIHJlZ2FyZGxlc3Mgb2YgdGhlIGRpZmZlcmVudCBidXNpbmVzcyByZWxhdGlvbnNoaXBzIC8gc3RydWN0dXJlcyBiZXR3ZWVuIG9yIHdpdGhpbiB0aGUgQnVzaW5lc3MgUGFydG5lcnMgb3IgY29tcGFueSBsb2NhdGlvbnMuIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5idXNpbmVzc19wYXJ0bmVyX251bWJlcl8xLjAuMF9CcG5zQ2hhcmFjdGVyaXN0aWMiDQogICAgICAgICAgfSwNCiAgICAgICAgICAiZnVuY3Rpb24iIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgZnVuY3Rpb24gb2YgdGhlIHNpdGUgaW4gcmVsYXRpb24gdG8gdGhlIHBhcnQoaS5lLiB0aGUgYWN0aXZpdHkgd2l0aGluIHRoZSB2YWx1ZSBjaGFpbiBvZiB0aGUgcGFydCB0aGF0IGlzIHBlcmZvcm1lZCBhdCB0aGUgc2l0ZSkiLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXgucGFydF9hc19wbGFubmVkXzIuMC4wX0Z1bmN0aW9uQ2hhcmFjdGVyaXN0aWMiDQogICAgICAgICAgfSwNCiAgICAgICAgICAiZnVuY3Rpb25WYWxpZEZyb20iIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaW1lc3RhbXAsIGZyb20gd2hlbiB0aGUgc2l0ZSBoYXMgdGhlIHNwZWNpZmllZCBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIHBhcnQiLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX29yZy5lY2xpcHNlLmVzbWYuc2FtbV9jaGFyYWN0ZXJpc3RpY18yLjEuMF9UaW1lc3RhbXAiDQogICAgICAgICAgfSwNCiAgICAgICAgICAiZnVuY3Rpb25WYWxpZFVudGlsIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGltZXN0YW1wLCB1bnRpbCB3aGVuIHRoZSBzaXRlIGhhcyB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gcGFydCIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1fb3JnLmVjbGlwc2UuZXNtZi5zYW1tX2NoYXJhY3RlcmlzdGljXzIuMS4wX1RpbWVzdGFtcCINCiAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgICJyZXF1aXJlZCIgOiBbICJjYXRlbmFYc2l0ZUlkIiwgImZ1bmN0aW9uIiBdDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXgucGFydF9hc19wbGFubmVkXzIuMC4wX3BhcnRTaXRlc0luZm9ybWF0aW9uQXNQbGFubmVkQ2hhcmFjdGVyaXN0aWMiIDogew0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBjaGFyYWN0ZXJpc3RpYyBvZiB0aGUgcGFydCBzaXRlIGluZm9ybWF0aW9uIHRoYXQgcmVwcmVzZW50cyBhIHNldCBvZiBwb3NzaWJsZSBzaXRlIHRvIGEgcmVwZWN0aXZlIHBhcnQuICIsDQogICAgICAgICJ0eXBlIiA6ICJhcnJheSIsDQogICAgICAgICJpdGVtcyIgOiB7DQogICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXgucGFydF9hc19wbGFubmVkXzIuMC4wX3BhcnRTaXRlc0luZm9ybWF0aW9uQXNQbGFubmVkRW50aXR5Ig0KICAgICAgICB9LA0KICAgICAgICAidW5pcXVlSXRlbXMiIDogdHJ1ZQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgInByb3BlcnRpZXMiIDogew0KICAgICJjYXRlbmFYSWQiIDogew0KICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgZnVsbHkgYW5vbnltb3VzIENhdGVuYS1YIElEIG9mIHRoZSBzZXJpYWxpemVkIHBhcnQsIHZhbGlkIGZvciB0aGUgQ2F0ZW5hLVggZGF0YXNwYWNlLiIsDQogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zaGFyZWQudXVpZF8xLjAuMF9VdWlkVjRUcmFpdCINCiAgICB9LA0KICAgICJwYXJ0VHlwZUluZm9ybWF0aW9uIiA6IHsNCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHBhcnQgdHlwZSBmcm9tIHdoaWNoIHRoZSBzZXJpYWxpemVkIHBhcnQgaGFzIGJlZW4gaW5zdGFudGlhdGVkIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8yLjAuMF9QYXJ0VHlwZUluZm9ybWF0aW9uQ2hhcmFjdGVyaXN0aWMiDQogICAgfSwNCiAgICAicGFydFNpdGVzSW5mb3JtYXRpb25Bc1BsYW5uZWQiIDogew0KICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIHNpdGUgaXMgYSBkZWxpbWl0ZWQgZ2VvZ3JhcGhpY2FsIGFyZWEgd2hlcmUgYSBsZWdhbCBlbnRpdHkgZG9lcyBidXNpbmVzcyhnZW9ncmFwaGljYWwgYWRkcmVzcyB3aXRoIGdlbyBjb29yZGluYXRlcykuQSBzaXRlIGFsd2F5cyBoYXMgYSBwcmltYXJ5IHBoeXNpY2FsIGFkZHJlc3MuIEl0IGlzIHBvc3NpYmxlIHRoYXQgZnVydGhlciBwaHlzaWNhbCBhZGRyZXNzZXMgYXJlIHNwZWNpZmllZCBmb3IgdGhlIHNpdGUuIFAuTy4gYm94IGRldGFpbHMgYXJlIG9ubHkgcG9zc2libGUgaW4gYWRkaXRpb24gdG8gdGhlIHBoeXNpY2FsIGFkZHJlc3MuIEEgc2l0ZSBoYXMgYSAxOm4gcmVsYXRpb24gdG8gYWRkcmVzc2VzLCBtZWFucyBhdCBsZWFzdCAxIGFkZHJlc3MgaXMgbmVjZXNzYXJ5IGFuZCBtdWx0aXBsZSBhZGRyZXNzZXMgYXJlIHBvc3NpYmxlLiIsDQogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWRfMi4wLjBfcGFydFNpdGVzSW5mb3JtYXRpb25Bc1BsYW5uZWRDaGFyYWN0ZXJpc3RpYyINCiAgICB9DQogIH0sDQogICJyZXF1aXJlZCIgOiBbICJjYXRlbmFYSWQiLCAicGFydFR5cGVJbmZvcm1hdGlvbiIgXQ0KfQ==
      # urn:samm:io.catenax.single_level_bom_as_built:3.0.0#SingleLevelBomAsBuilt
      dXJuOnNhbW06aW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfYm9tX2FzX2J1aWx0OjMuMC4wI1NpbmdsZUxldmVsQm9tQXNCdWlsdA: 
      # urn:samm:io.catenax.batch:3.0.0#Batch
      dXJuOnNhbW06aW8uY2F0ZW5heC5iYXRjaDozLjAuMCNCYXRjaA: 
      # urn:samm:io.catenax.just_in_sequence_part:3.0.0#JustInSequencePart
      dXJuOnNhbW06aW8uY2F0ZW5heC5qdXN0X2luX3NlcXVlbmNlX3BhcnQ6My4wLjAjSnVzdEluU2VxdWVuY2VQYXJ0: 
      # urn:samm:io.catenax.serial_part:1.0.1#SerialPart
      dXJuOnNhbW06aW8uY2F0ZW5heC5zZXJpYWxfcGFydDoxLjAuMSNTZXJpYWxQYXJ0: 
      # urn:samm:io.catenax.serial_part:2.0.0#SerialPart
      dXJuOnNhbW06aW8uY2F0ZW5heC5zZXJpYWxfcGFydDoyLjAuMCNTZXJpYWxQYXJ0: ewogICIkc2NoZW1hIiA6ICJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSIsCiAgImRlc2NyaXB0aW9uIiA6ICJBIHNlcmlhbGl6ZWQgcGFydCBpcyBhbiBpbnN0YW50aWF0aW9uIG9mIGEgKGRlc2lnbi0pIHBhcnQsIHdoZXJlIHRoZSBwYXJ0aWN1bGFyIGluc3RhbnRpYXRpb24gY2FuIGJlIHVuaXF1ZWx5IGlkZW50aWZpZWQgYnkgbWVhbnMgb2YgYSBzZXJpYWwgbnVtYmVyIG9yIGEgc2ltaWxhciBpZGVudGlmaWVyIChlLmcuIFZBTikgb3IgYSBjb21iaW5hdGlvbiBvZiBtdWx0aXBsZSBpZGVudGlmaWVycyAoZS5nLiBjb21iaW5hdGlvbiBvZiBtYW51ZmFjdHVyZXIsIGRhdGUgYW5kIG51bWJlcikiLAogICJ0eXBlIiA6ICJvYmplY3QiLAogICJjb21wb25lbnRzIiA6IHsKICAgICJzY2hlbWFzIiA6IHsKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnV1aWRfMS4wLjBfVXVpZFY0VHJhaXQiIDogewogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHByb3ZpZGVkIHJlZ3VsYXIgZXhwcmVzc2lvbiBlbnN1cmVzIHRoYXQgdGhlIFVVSUQgaXMgY29tcG9zZWQgb2YgZml2ZSBncm91cHMgb2YgY2hhcmFjdGVycyBzZXBhcmF0ZWQgYnkgaHlwaGVucywgaW4gdGhlIGZvcm0gOC00LTQtNC0xMiBmb3IgYSB0b3RhbCBvZiAzNiBjaGFyYWN0ZXJzICgzMiBoZXhhZGVjaW1hbCBjaGFyYWN0ZXJzIGFuZCA0IGh5cGhlbnMpLCBvcHRpb25hbGx5IHByZWZpeGVkIGJ5IFwidXJuOnV1aWQ6XCIgdG8gbWFrZSBpdCBhbiBJUkkuIiwKICAgICAgICAicGF0dGVybiIgOiAiKF5bMC05YS1mQS1GXXs4fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXsxMn0kKXwoXnVybjp1dWlkOlswLTlhLWZBLUZdezh9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezEyfSQpIgogICAgICB9LAogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8yLjAuMF9LZXlDaGFyYWN0ZXJpc3RpYyIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUga2V5IGNoYXJhY3RlcmlzdGljIG9mIGEgbG9jYWwgaWRlbnRpZmllci4gQSBzcGVjaWZpYyBzdWJzZXQgb2Yga2V5cyBpcyBwcmVkZWZpbmVkLCBidXQgYWRkaXRpb25hbGx5IGFueSBvdGhlciBjdXN0b20ga2V5IGlzIGFsbG93ZWQuIFByZWRlZmluZWQga2V5cyAodG8gYmUgdXNlZCB3aGVuIGFwcGxpY2FibGUpOlxuLSBcIm1hbnVmYWN0dXJlcklkXCIgLSBUaGUgQnVzaW5lc3MgUGFydG5lciBOdW1iZXIgKEJQTikgb2YgdGhlIG1hbnVmYWN0dXJlci4gVmFsdWU6IEJQTi1OdW1tZXJcbi0gXCJwYXJ0SW5zdGFuY2VJZFwiIC0gVGhlIGlkZW50aWZpZXIgb2YgdGhlIG1hbnVmYWN0dXJlciBmb3IgdGhlIHNlcmlhbGl6ZWQgaW5zdGFuY2Ugb2YgdGhlIHBhcnQsIGUuZy4gdGhlIHNlcmlhbCBudW1iZXJcbi0gXCJiYXRjaElkXCIgLSBUaGUgaWRlbnRpZmllciBvZiB0aGUgYmF0Y2gsIHRvIHdoaWNoIHRoZSBzZXJpYWx6ZWQgcGFydCBiZWxvbmdzXG4tIFwidmFuXCIgLSBUaGUgYW5vbnltaXplZCB2ZWhpY2xlIGlkZW50aWZpY2F0aW9uIG51bWJlciAoVklOKS4gVmFsdWU6IGFub255bWl6ZWQgVklOIGFjY29yZGluZyB0byBPRU0gYW5vbnltaXphdGlvbiBydWxlcy4gTm90ZTogSWYgdGhlIGtleSBcInZhblwiIGlzIGF2YWlsYWJsZSwgXCJwYXJ0SW5zdGFuY2VJZFwiIG11c3QgYWxzbyBiZSBhdmFpbGFibGUgYW5kIGhvbGQgdGhlIGlkZW50aWNhbCB2YWx1ZS4iCiAgICAgIH0sCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzIuMC4wX1ZhbHVlQ2hhcmFjdGVyaXN0aWMiIDogewogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHZhbHVlIG9mIGFuIGlkZW50aWZpZXIuIgogICAgICB9LAogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8yLjAuMF9LZXlWYWx1ZUxpc3QiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBsaXN0IG9mIGtleSB2YWx1ZSBwYWlycyBmb3IgbG9jYWwgaWRlbnRpZmllcnMsIHdoaWNoIGFyZSBjb21wb3NlZCBvZiBhIGtleSBhbmQgYSBjb3JyZXNwb25kaW5nIHZhbHVlLiIsCiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsCiAgICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICAgImtleSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGtleSBvZiBhIGxvY2FsIGlkZW50aWZpZXIuICIsCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzIuMC4wX0tleUNoYXJhY3RlcmlzdGljIgogICAgICAgICAgfSwKICAgICAgICAgICJ2YWx1ZSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHZhbHVlIG9mIGFuIGlkZW50aWZpZXIuIiwKICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2VyaWFsX3BhcnRfMi4wLjBfVmFsdWVDaGFyYWN0ZXJpc3RpYyIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJyZXF1aXJlZCIgOiBbICJrZXkiLCAidmFsdWUiIF0KICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2VyaWFsX3BhcnRfMi4wLjBfTG9jYWxJZGVudGlmaWVyQ2hhcmFjdGVyaXN0aWMiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBzaW5nbGUgc2VyaWFsaXplZCBwYXJ0IG1heSBoYXZlIG11bHRpcGxlIGF0dHJpYnV0ZXMsIHRoYXQgdW5pcXVlbHkgaWRlbnRpZnkgYSB0aGF0IHBhcnQgaW4gYSBzcGVjaWZpYyBkYXRhc3BhY2UgKGUuZy4gdGhlIG1hbnVmYWN0dXJlcmBzIGRhdGFzcGFjZSkiLAogICAgICAgICJ0eXBlIiA6ICJhcnJheSIsCiAgICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzIuMC4wX0tleVZhbHVlTGlzdCIKICAgICAgICB9LAogICAgICAgICJ1bmlxdWVJdGVtcyIgOiB0cnVlCiAgICAgIH0sCiAgICAgICJ1cm5fc2FtbV9vcmcuZWNsaXBzZS5lc21mLnNhbW1fY2hhcmFjdGVyaXN0aWNfMi4xLjBfVGltZXN0YW1wIiA6IHsKICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAicGF0dGVybiIgOiAiLT8oWzEtOV1bMC05XXszLH18MFswLTldezN9KS0oMFsxLTldfDFbMC0yXSktKDBbMS05XXxbMTJdWzAtOV18M1swMV0pVCgoWzAxXVswLTldfDJbMC0zXSk6WzAtNV1bMC05XTpbMC01XVswLTldKFxcLlswLTldKyk/fCgyNDowMDowMChcXC4wKyk/KSkoWnwoXFwrfC0pKCgwWzAtOV18MVswLTNdKTpbMC01XVswLTldfDE0OjAwKSk/IiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkRlc2NyaWJlcyBhIFByb3BlcnR5IHdoaWNoIGNvbnRhaW5zIHRoZSBkYXRlIGFuZCB0aW1lIHdpdGggYW4gb3B0aW9uYWwgdGltZXpvbmUuIgogICAgICB9LAogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8yLjAuMF9Qcm9kdWN0aW9uQ291bnRyeUNvZGVUcmFpdCIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJSZWd1bGFyIEV4cHJlc3Npb24gdGhhdCBlbnN1cmVzIGEgdGhyZWUtbGV0dGVyIGNvZGUgIiwKICAgICAgICAicGF0dGVybiIgOiAiXltBLVpdW0EtWl1bQS1aXSQiCiAgICAgIH0sCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzIuMC4wX01hbnVmYWN0dXJpbmdDaGFyYWN0ZXJpc3RpYyIgOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDaGFyYWN0ZXJpc3RpYyB0byBkZXNjcmliZSBtYW51ZmFjdHVyaW5nIHJlbGF0ZWQgZGF0YSIsCiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsCiAgICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICAgImRhdGUiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRpbWVzdGFtcCBvZiB0aGUgbWFudWZhY3R1cmluZyBkYXRlIGFzIHRoZSBmaW5hbCBzdGVwIGluIHByb2R1Y3Rpb24gcHJvY2VzcyAoZS5nLiBmaW5hbCBxdWFsaXR5IGNoZWNrLCByZWFkeS1mb3Itc2hpcG1lbnQgZXZlbnQpIiwKICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX29yZy5lY2xpcHNlLmVzbWYuc2FtbV9jaGFyYWN0ZXJpc3RpY18yLjEuMF9UaW1lc3RhbXAiCiAgICAgICAgICB9LAogICAgICAgICAgImNvdW50cnkiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNvdW50cnkgY29kZSB3aGVyZSB0aGUgcGFydCB3YXMgbWFudWZhY3R1cmVkIiwKICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2VyaWFsX3BhcnRfMi4wLjBfUHJvZHVjdGlvbkNvdW50cnlDb2RlVHJhaXQiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAicmVxdWlyZWQiIDogWyAiZGF0ZSIgXQogICAgICB9LAogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8yLjAuMF9QYXJ0SWRDaGFyYWN0ZXJpc3RpYyIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgcGFydCBJRCBpcyBhIG11bHRpLWNoYXJhY3RlciBzdHJpbmcsIHVzdWFsbHkgYXNzaWduZWQgYnkgYW4gRVJQIHN5c3RlbSIKICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2VyaWFsX3BhcnRfMi4wLjBfUGFydE5hbWVDaGFyYWN0ZXJpc3RpYyIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJQYXJ0IE5hbWUgaW4gc3RyaW5nIGZvcm1hdCBmcm9tIHRoZSByZXNwZWN0aXZlIHN5c3RlbSBpbiB0aGUgdmFsdWUgY2hhaW4iCiAgICAgIH0sCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzIuMC4wX0NsYXNzaWZpY2F0aW9uQ2hhcmFjdGVyaXN0aWMiIDogewogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBwYXJ0IHR5cGUgbXVzdCBiZSBwbGFjZWQgaW50byBvbmUgb2YgdGhlIGZvbGxvd2luZyBjbGFzc2VzOiAnY29tcG9uZW50JywgJ3Byb2R1Y3QnLCAnc29mdHdhcmUnLCAnYXNzZW1ibHknLCAndG9vbCcsIG9yICdyYXcgbWF0ZXJpYWwnLiIsCiAgICAgICAgImVudW0iIDogWyAicHJvZHVjdCIsICJyYXcgbWF0ZXJpYWwiLCAic29mdHdhcmUiLCAiYXNzZW1ibHkiLCAidG9vbCIsICJjb21wb25lbnQiIF0KICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2VyaWFsX3BhcnRfMi4wLjBfUGFydFR5cGVJbmZvcm1hdGlvbkNoYXJhY3RlcmlzdGljIiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIHBhcnQgdHlwZSIsCiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsCiAgICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICAgIm1hbnVmYWN0dXJlclBhcnRJZCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiUGFydCBJRCBhcyBhc3NpZ25lZCBieSB0aGUgbWFudWZhY3R1cmVyIG9mIHRoZSBwYXJ0LiBUaGUgUGFydCBJRCBpZGVudGlmaWVzIHRoZSBwYXJ0IChhcyBkZXNpZ25lZCkgaW4gdGhlIG1hbnVmYWN0dXJlcmBzIGRhdGFzcGFjZS4gVGhlIFBhcnQgSUQgZG9lcyBub3QgcmVmZXJlbmNlIGEgc3BlY2lmaWMgaW5zdGFuY2Ugb2YgYSBwYXJ0IGFuZCB0aHVzIHNob3VsZCBub3QgYmUgY29uZnVzZWQgd2l0aCB0aGUgc2VyaWFsIG51bWJlci4iLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8yLjAuMF9QYXJ0SWRDaGFyYWN0ZXJpc3RpYyIKICAgICAgICAgIH0sCiAgICAgICAgICAiY3VzdG9tZXJQYXJ0SWQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlBhcnQgSUQgYXMgYXNzaWduZWQgYnkgdGhlIG1hbnVmYWN0dXJlciBvZiB0aGUgcGFydC4gVGhlIFBhcnQgSUQgaWRlbnRpZmllcyB0aGUgcGFydCAoYXMgZGVzaWduZWQpIGluIHRoZSBjdXN0b21lcmBzIGRhdGFzcGFjZS4gVGhlIFBhcnQgSUQgZG9lcyBub3QgcmVmZXJlbmNlIGEgc3BlY2lmaWMgaW5zdGFuY2Ugb2YgYSBwYXJ0IGFuZCB0aHVzIHNob3VsZCBub3QgYmUgY29uZnVzZWQgd2l0aCB0aGUgc2VyaWFsIG51bWJlci4iLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8yLjAuMF9QYXJ0SWRDaGFyYWN0ZXJpc3RpYyIKICAgICAgICAgIH0sCiAgICAgICAgICAibmFtZUF0TWFudWZhY3R1cmVyIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJOYW1lIG9mIHRoZSBwYXJ0IGFzIGFzc2lnbmVkIGJ5IHRoZSBtYW51ZmFjdHVyZXIiLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8yLjAuMF9QYXJ0TmFtZUNoYXJhY3RlcmlzdGljIgogICAgICAgICAgfSwKICAgICAgICAgICJuYW1lQXRDdXN0b21lciIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiTmFtZSBvZiB0aGUgcGFydCBhcyBhc3NpZ25lZCBieSB0aGUgY3VzdG9tZXIiLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8yLjAuMF9QYXJ0TmFtZUNoYXJhY3RlcmlzdGljIgogICAgICAgICAgfSwKICAgICAgICAgICJjbGFzc2lmaWNhdGlvbiIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGNsYXNzaWZpY2F0aW9uIG9mIHRoZSBwYXJ0IHR5cGUgYWNjb3JkaW5nIHRvIFNURVAgc3RhbmRhcmQgZGVmaW5pdGlvbiIsCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzIuMC4wX0NsYXNzaWZpY2F0aW9uQ2hhcmFjdGVyaXN0aWMiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAicmVxdWlyZWQiIDogWyAibWFudWZhY3R1cmVyUGFydElkIiwgIm5hbWVBdE1hbnVmYWN0dXJlciIsICJjbGFzc2lmaWNhdGlvbiIgXQogICAgICB9LAogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zaGFyZWQuYnVzaW5lc3NfcGFydG5lcl9udW1iZXJfMS4wLjBfQnBuc0NoYXJhY3RlcmlzdGljIiA6IHsKICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkJQTlMgKEJ1c2luZXNzIFBhcnRuZXIgTnVtYmVyIFNpdGUpIHJlcHJlc2VudHMgYSBzaXRlIHdoaWNoIGNhbiBiZSBhIHByb2R1Y3Rpb24gcGxhbnQuIEEgc2l0ZSBjYW4gYWxzbyBiZSBlLmcuIGFuIG9mZmljZSBvciBhIHdhcmVob3VzZS4gQW4gaW5mb3JtYXRpb24gcmVsYXRlZCB0byBhIHNpdGUgaXMgZS5nLiBuZWVkZWQgZm9yIHJlcG9ydGluZyBpc3N1ZXMgKEhvdyBtYW55IHNpdGVzIGRvZXMgZS5nLiBCZWlzcGllbCBBRyBoYXZlPyksIHN0YXR1cyBvZiBvcGVyYXRpb24gKG91dCBvZiBvcGVyYXRpb25zIGR1ZSB0byBlbnZpcm9ubWVudGFsIGRpc2FzdGVyKSwgZm9yIGNlcnRpZmljYXRlcyBvbiBzaXRlIGxldmVsIChlLmcuIGVudmlyb25tZW50IGNlcnRpZmljYXRlcykgb3IgZm9yIGludGVybmFsIHJlZ3VsYXRpb25zIG9uIHNpdGUgbGV2ZWwsIChlLmcuIHNlY3VyaXR5IHRvcGljcywgQ29yb25hIHJ1bGVzLC4uLikuIFNldmVyYWwgYWRkcmVzc2VzICg9IEJQTkEgd2l0aCBkaWZmZXJlbnQgc3RyZWV0cyBhbmQgZGlmZmVyZW50IGdhdGVzKSBjYW4gYmVsb25nIHRvIG9uZSBzaXRlLiBBIEJQTlMgc2hvdWxkIGJlIGFsd2F5cyBsaW5rZWQgdG8gb25lIEJQTkwgdmlhIHJlbGF0aW9uc2hpcCAnYmVsb25ncyB0byBsZWdhbCBlbnRpdHknLiIKICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8xLjAuMF9GdW5jdGlvbkNoYXJhY3RlcmlzdGljIiA6IHsKICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkRlc2NyaWJlcyB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIHRoZSBmdW5jdGlvbiBmb3IgYSBzaXRlIHJlbGF0ZWQgdG8gdGhlIHJlc3BlY3RpdmUgcGFydC4iLAogICAgICAgICJlbnVtIiA6IFsgInByb2R1Y3Rpb24iLCAid2FyZWhvdXNlIiwgInNwYXJlIHBhcnQgd2FyZWhvdXNlIiBdCiAgICAgIH0sCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfYnVpbHRfMS4wLjBfU2l0ZXNFbnRpdHkiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzY3JpYmVzIHRoZSBJRCBhbmQgZnVuY3Rpb24gb2YgYSBzaXRlIGZvciB0aGUgYXNzb2NpYXRlZCBwYXJ0IGluIHRoZSBBc0J1aWx0IGNvbnRleHQoZS5nLiBTZXJpYWxQYXJ0LCBCYXRjaCwgaklTKS4iLAogICAgICAgICJ0eXBlIiA6ICJvYmplY3QiLAogICAgICAgICJwcm9wZXJ0aWVzIiA6IHsKICAgICAgICAgICJjYXRlbmFYc2l0ZUlkIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgaWRlbnRpZmllciBvZiB0aGUgc2l0ZSBhY2NvcmRpbmcgdG8gQ2F0ZW5hLVggQlBETS4gVGhlIGNhdGVuYVhzaXRlSWQgbXVzdCBiZSBhIHZhbGlkIENhdGVuYS1YIEJQTi4gVGhlIEJQTiBpcyBhIHVuaXF1ZSwgdW5jaGFuZ2VhYmxlIGlkZW50aWZpZXIgZm9yIEJ1c2luZXNzIFBhcnRuZXJzIC8gY29tcGFueSBsb2NhdGlvbnMgZnJvbSBmb3VuZGF0aW9uIHRvIGNsb3N1cmUsIHJlZ2FyZGxlc3Mgb2YgdGhlIGRpZmZlcmVudCBidXNpbmVzcyByZWxhdGlvbnNoaXBzIC8gc3RydWN0dXJlcyBiZXR3ZWVuIG9yIHdpdGhpbiB0aGUgQnVzaW5lc3MgUGFydG5lcnMgb3IgY29tcGFueSBsb2NhdGlvbnMuIiwKICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLmJ1c2luZXNzX3BhcnRuZXJfbnVtYmVyXzEuMC4wX0JwbnNDaGFyYWN0ZXJpc3RpYyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZnVuY3Rpb24iIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBmdW5jdGlvbiBvZiB0aGUgc2l0ZSBpbiByZWxhdGlvbiB0byB0aGUgcGFydChpLmUuIHRoZSBhY3Rpdml0eSB3aXRoaW4gdGhlIHZhbHVlIGNoYWluIG9mIHRoZSBwYXJ0IHRoYXQgaXMgcGVyZm9ybWVkIGF0IHRoZSBzaXRlKSIsCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfYnVpbHRfMS4wLjBfRnVuY3Rpb25DaGFyYWN0ZXJpc3RpYyIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJyZXF1aXJlZCIgOiBbICJjYXRlbmFYc2l0ZUlkIiwgImZ1bmN0aW9uIiBdCiAgICAgIH0sCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfYnVpbHRfMS4wLjBfU2l0ZXNDaGFyYWN0ZXJpc3RpYyIgOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTaXRlcyBDaGFyYWN0ZXJpc3RpYyIsCiAgICAgICAgInR5cGUiIDogImFycmF5IiwKICAgICAgICAiaXRlbXMiIDogewogICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8xLjAuMF9TaXRlc0VudGl0eSIKICAgICAgICB9LAogICAgICAgICJ1bmlxdWVJdGVtcyIgOiB0cnVlCiAgICAgIH0KICAgIH0KICB9LAogICJwcm9wZXJ0aWVzIiA6IHsKICAgICJjYXRlbmFYSWQiIDogewogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBmdWxseSBhbm9ueW1vdXMgQ2F0ZW5hLVggSUQgb2YgdGhlIHNlcmlhbGl6ZWQgcGFydCwgdmFsaWQgZm9yIHRoZSBDYXRlbmEtWCBkYXRhc3BhY2UuIiwKICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnV1aWRfMS4wLjBfVXVpZFY0VHJhaXQiCiAgICB9LAogICAgImxvY2FsSWRlbnRpZmllcnMiIDogewogICAgICAiZGVzY3JpcHRpb24iIDogIkEgbG9jYWwgaWRlbnRpZmllciBlbmFibGVzIGlkZW50aWZpY2F0aW9uIG9mIGEgcGFydCBpbiBhIHNwZWNpZmljIGRhdGFzcGFjZSwgYnV0IGlzIG5vdCB1bmlxdWUgaW4gQ2F0ZW5hLVggZGF0YXNwYWNlLiBNdWx0aXBsZSBsb2NhbCBpZGVudGlmaWVycyBtYXkgZXhpc3QuIiwKICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2VyaWFsX3BhcnRfMi4wLjBfTG9jYWxJZGVudGlmaWVyQ2hhcmFjdGVyaXN0aWMiCiAgICB9LAogICAgIm1hbnVmYWN0dXJpbmdJbmZvcm1hdGlvbiIgOiB7CiAgICAgICJkZXNjcmlwdGlvbiIgOiAiSW5mb3JtYXRpb24gZnJvbSBtYW51ZmFjdHVyaW5nIHByb2Nlc3MsIHN1Y2ggYXMgbWFudWZhY3R1cmluZyBkYXRlIGFuZCBtYW51ZmFjdHVyaW5nIGNvdW50cnkiLAogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8yLjAuMF9NYW51ZmFjdHVyaW5nQ2hhcmFjdGVyaXN0aWMiCiAgICB9LAogICAgInBhcnRUeXBlSW5mb3JtYXRpb24iIDogewogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwYXJ0IHR5cGUgZnJvbSB3aGljaCB0aGUgc2VyaWFsaXplZCBwYXJ0IGhhcyBiZWVuIGluc3RhbnRpYXRlZCIsCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzIuMC4wX1BhcnRUeXBlSW5mb3JtYXRpb25DaGFyYWN0ZXJpc3RpYyIKICAgIH0sCiAgICAic2l0ZXMiIDogewogICAgICAiZGVzY3JpcHRpb24iIDogIkEgc2l0ZSBpcyBhIGRlbGltaXRlZCBnZW9ncmFwaGljYWwgYXJlYSB3aGVyZSBhIGxlZ2FsIGVudGl0eSBkb2VzIGJ1c2luZXNzKGdlb2dyYXBoaWNhbCBhZGRyZXNzIHdpdGggZ2VvIGNvb3JkaW5hdGVzKS5BIHNpdGUgYWx3YXlzIGhhcyBhIHByaW1hcnkgcGh5c2ljYWwgYWRkcmVzcy4gSXQgaXMgcG9zc2libGUgdGhhdCBmdXJ0aGVyIHBoeXNpY2FsIGFkZHJlc3NlcyBhcmUgc3BlY2lmaWVkIGZvciB0aGUgc2l0ZS4gUC5PLiBib3ggZGV0YWlscyBhcmUgb25seSBwb3NzaWJsZSBpbiBhZGRpdGlvbiB0byB0aGUgcGh5c2ljYWwgYWRkcmVzcy4gQSBzaXRlIGhhcyBhIDE6biByZWxhdGlvbiB0byBhZGRyZXNzZXMsIG1lYW5zIGF0IGxlYXN0IDEgYWRkcmVzcyBpcyBuZWNlc3NhcnkgYW5kIG11bHRpcGxlIGFkZHJlc3NlcyBhcmUgcG9zc2libGUuIiwKICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8xLjAuMF9TaXRlc0NoYXJhY3RlcmlzdGljIgogICAgfQogIH0sCiAgInJlcXVpcmVkIiA6IFsgImNhdGVuYVhJZCIsICJsb2NhbElkZW50aWZpZXJzIiwgIm1hbnVmYWN0dXJpbmdJbmZvcm1hdGlvbiIsICJwYXJ0VHlwZUluZm9ybWF0aW9uIiBdCn0=
      # urn:samm:io.catenax.serial_part:3.0.0#SerialPart
      dXJuOnNhbW06aW8uY2F0ZW5heC5zZXJpYWxfcGFydDozLjAuMCNTZXJpYWxQYXJ0: 
      # urn:samm:io.catenax.shared.part_site_information_as_built:1.0.0#PartSiteInformationAsBuilt
      dXJuOnNhbW06aW8uY2F0ZW5heC5zaGFyZWQucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX2J1aWx0OjEuMC4wI1BhcnRTaXRlSW5mb3JtYXRpb25Bc0J1aWx0: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIlRoZSBhc3BlY3QgcHJvdmlkZXMgc2l0ZSByZWxhdGVkIGluZm9ybWF0aW9uIGZvciBhIGdpdmVuIGl0ZW0oaS5lLiBhIHBhcnQgdHlwZSBvciBwYXJ0IGluc3RhbmNlIHRoYXQgaXMgdW5pcXVlbHkgaWRlbnRpZmlhYmxlIHdpdGhpbiBDYXRlbmEtWCB2aWEgaXRzIENhdGVuYS1YIElEKS4gQSBzaXRlIGlzIGEgZGVsaW1pdGVkIGdlb2dyYXBoaWNhbCBhcmVhIHdoZXJlIGEgbGVnYWwgZW50aXR5IGRvZXMgYnVzaW5lc3MuIEluIHRoaXMgY29udGV4dCBhbGwgcG90ZW50aWFsbHkgcmVsYXRlZCBzaXRlcyBhcmUgbGlzdGVkIGluY2x1ZGluZyBhbGwgc2l0ZXMgd2hlcmUgZS5nLiBwcm9kdWN0aW9uIG9mIHRoaXMgcGFydCh0eXBlKS4iLA0KICAidHlwZSIgOiAib2JqZWN0IiwNCiAgImNvbXBvbmVudHMiIDogew0KICAgICJzY2hlbWFzIiA6IHsNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5idXNpbmVzc19wYXJ0bmVyX251bWJlcl8xLjAuMF9CcG5zQ2hhcmFjdGVyaXN0aWMiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJCUE5TIChCdXNpbmVzcyBQYXJ0bmVyIE51bWJlciBTaXRlKSByZXByZXNlbnRzIGEgc2l0ZSB3aGljaCBjYW4gYmUgYSBwcm9kdWN0aW9uIHBsYW50LiBBIHNpdGUgY2FuIGFsc28gYmUgZS5nLiBhbiBvZmZpY2Ugb3IgYSB3YXJlaG91c2UuIEFuIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gYSBzaXRlIGlzIGUuZy4gbmVlZGVkIGZvciByZXBvcnRpbmcgaXNzdWVzIChIb3cgbWFueSBzaXRlcyBkb2VzIGUuZy4gQmVpc3BpZWwgQUcgaGF2ZT8pLCBzdGF0dXMgb2Ygb3BlcmF0aW9uIChvdXQgb2Ygb3BlcmF0aW9ucyBkdWUgdG8gZW52aXJvbm1lbnRhbCBkaXNhc3RlciksIGZvciBjZXJ0aWZpY2F0ZXMgb24gc2l0ZSBsZXZlbCAoZS5nLiBlbnZpcm9ubWVudCBjZXJ0aWZpY2F0ZXMpIG9yIGZvciBpbnRlcm5hbCByZWd1bGF0aW9ucyBvbiBzaXRlIGxldmVsLCAoZS5nLiBzZWN1cml0eSB0b3BpY3MsIENvcm9uYSBydWxlcywuLi4pLiBTZXZlcmFsIGFkZHJlc3NlcyAoPSBCUE5BIHdpdGggZGlmZmVyZW50IHN0cmVldHMgYW5kIGRpZmZlcmVudCBnYXRlcykgY2FuIGJlbG9uZyB0byBvbmUgc2l0ZS4gQSBCUE5TIHNob3VsZCBiZSBhbHdheXMgbGlua2VkIHRvIG9uZSBCUE5MIHZpYSByZWxhdGlvbnNoaXAgJ2JlbG9uZ3MgdG8gbGVnYWwgZW50aXR5Jy4iDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8xLjAuMF9GdW5jdGlvbkNoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzY3JpYmVzIHRoZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIGZ1bmN0aW9uIGZvciBhIHNpdGUgcmVsYXRlZCB0byB0aGUgcmVzcGVjdGl2ZSBwYXJ0LiIsDQogICAgICAgICJlbnVtIiA6IFsgInByb2R1Y3Rpb24iLCAid2FyZWhvdXNlIiwgInNwYXJlIHBhcnQgd2FyZWhvdXNlIiBdDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8xLjAuMF9TaXRlc0VudGl0eSIgOiB7DQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzY3JpYmVzIHRoZSBJRCBhbmQgZnVuY3Rpb24gb2YgYSBzaXRlIGZvciB0aGUgYXNzb2NpYXRlZCBwYXJ0IGluIHRoZSBBc0J1aWx0IGNvbnRleHQoZS5nLiBTZXJpYWxQYXJ0LCBCYXRjaCwgaklTKS4iLA0KICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwNCiAgICAgICAgInByb3BlcnRpZXMiIDogew0KICAgICAgICAgICJjYXRlbmFYc2l0ZUlkIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGlkZW50aWZpZXIgb2YgdGhlIHNpdGUgYWNjb3JkaW5nIHRvIENhdGVuYS1YIEJQRE0uIFRoZSBjYXRlbmFYc2l0ZUlkIG11c3QgYmUgYSB2YWxpZCBDYXRlbmEtWCBCUE4uIFRoZSBCUE4gaXMgYSB1bmlxdWUsIHVuY2hhbmdlYWJsZSBpZGVudGlmaWVyIGZvciBCdXNpbmVzcyBQYXJ0bmVycyAvIGNvbXBhbnkgbG9jYXRpb25zIGZyb20gZm91bmRhdGlvbiB0byBjbG9zdXJlLCByZWdhcmRsZXNzIG9mIHRoZSBkaWZmZXJlbnQgYnVzaW5lc3MgcmVsYXRpb25zaGlwcyAvIHN0cnVjdHVyZXMgYmV0d2VlbiBvciB3aXRoaW4gdGhlIEJ1c2luZXNzIFBhcnRuZXJzIG9yIGNvbXBhbnkgbG9jYXRpb25zLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zaGFyZWQuYnVzaW5lc3NfcGFydG5lcl9udW1iZXJfMS4wLjBfQnBuc0NoYXJhY3RlcmlzdGljIg0KICAgICAgICAgIH0sDQogICAgICAgICAgImZ1bmN0aW9uIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGZ1bmN0aW9uIG9mIHRoZSBzaXRlIGluIHJlbGF0aW9uIHRvIHRoZSBwYXJ0KGkuZS4gdGhlIGFjdGl2aXR5IHdpdGhpbiB0aGUgdmFsdWUgY2hhaW4gb2YgdGhlIHBhcnQgdGhhdCBpcyBwZXJmb3JtZWQgYXQgdGhlIHNpdGUpIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfYnVpbHRfMS4wLjBfRnVuY3Rpb25DaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgICJyZXF1aXJlZCIgOiBbICJjYXRlbmFYc2l0ZUlkIiwgImZ1bmN0aW9uIiBdDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8xLjAuMF9TaXRlc0NoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTaXRlcyBDaGFyYWN0ZXJpc3RpYyIsDQogICAgICAgICJ0eXBlIiA6ICJhcnJheSIsDQogICAgICAgICJpdGVtcyIgOiB7DQogICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8xLjAuMF9TaXRlc0VudGl0eSINCiAgICAgICAgfSwNCiAgICAgICAgInVuaXF1ZUl0ZW1zIiA6IHRydWUNCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zaGFyZWQudXVpZF8xLjAuMF9VdWlkVjRUcmFpdCIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwcm92aWRlZCByZWd1bGFyIGV4cHJlc3Npb24gZW5zdXJlcyB0aGF0IHRoZSBVVUlEIGlzIGNvbXBvc2VkIG9mIGZpdmUgZ3JvdXBzIG9mIGNoYXJhY3RlcnMgc2VwYXJhdGVkIGJ5IGh5cGhlbnMsIGluIHRoZSBmb3JtIDgtNC00LTQtMTIgZm9yIGEgdG90YWwgb2YgMzYgY2hhcmFjdGVycyAoMzIgaGV4YWRlY2ltYWwgY2hhcmFjdGVycyBhbmQgNCBoeXBoZW5zKSwgb3B0aW9uYWxseSBwcmVmaXhlZCBieSBcInVybjp1dWlkOlwiIHRvIG1ha2UgaXQgYW4gSVJJLiIsDQogICAgICAgICJwYXR0ZXJuIiA6ICIoXlswLTlhLWZBLUZdezh9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezEyfSQpfChedXJuOnV1aWQ6WzAtOWEtZkEtRl17OH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17MTJ9JCkiDQogICAgICB9DQogICAgfQ0KICB9LA0KICAicHJvcGVydGllcyIgOiB7DQogICAgInNpdGVzIiA6IHsNCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBzaXRlIGlzIGEgZGVsaW1pdGVkIGdlb2dyYXBoaWNhbCBhcmVhIHdoZXJlIGEgbGVnYWwgZW50aXR5IGRvZXMgYnVzaW5lc3MoZ2VvZ3JhcGhpY2FsIGFkZHJlc3Mgd2l0aCBnZW8gY29vcmRpbmF0ZXMpLkEgc2l0ZSBhbHdheXMgaGFzIGEgcHJpbWFyeSBwaHlzaWNhbCBhZGRyZXNzLiBJdCBpcyBwb3NzaWJsZSB0aGF0IGZ1cnRoZXIgcGh5c2ljYWwgYWRkcmVzc2VzIGFyZSBzcGVjaWZpZWQgZm9yIHRoZSBzaXRlLiBQLk8uIGJveCBkZXRhaWxzIGFyZSBvbmx5IHBvc3NpYmxlIGluIGFkZGl0aW9uIHRvIHRoZSBwaHlzaWNhbCBhZGRyZXNzLiBBIHNpdGUgaGFzIGEgMTpuIHJlbGF0aW9uIHRvIGFkZHJlc3NlcywgbWVhbnMgYXQgbGVhc3QgMSBhZGRyZXNzIGlzIG5lY2Vzc2FyeSBhbmQgbXVsdGlwbGUgYWRkcmVzc2VzIGFyZSBwb3NzaWJsZS4iLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8xLjAuMF9TaXRlc0NoYXJhY3RlcmlzdGljIg0KICAgIH0sDQogICAgImNhdGVuYVhJZCIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBDYXRlbmEtWCBJRCBvZiB0aGUgZ2l2ZW4gaXRlbShpLmUuIGEgcGFydCB0eXBlIG9yIHBhcnQgaW5zdGFuY2UpLCB2YWxpZCBmb3IgdGhlIENhdGVuYS1YIGRhdGFzcGFjZS4iLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnV1aWRfMS4wLjBfVXVpZFY0VHJhaXQiDQogICAgfQ0KICB9LA0KICAicmVxdWlyZWQiIDogWyAic2l0ZXMiLCAiY2F0ZW5hWElkIiBdDQp9
      # urn:samm:io.catenax.single_level_bom_as_built:1.0.0#SingleLevelBomAsBuilt
      dXJuOnNhbW06aW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfYm9tX2FzX2J1aWx0OjEuMC4wI1NpbmdsZUxldmVsQm9tQXNCdWlsdA: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIlRoZSBzaW5nbGUtbGV2ZWwgYmlsbCBvZiBtYXRlcmlhbCByZXByZXNlbnRzIG9uZSBzdWItbGV2ZWwgb2YgYW4gYXNzZW1ibHkgYW5kIGRvZXMgbm90IGluY2x1ZGUgYW55IGxvd2VyLWxldmVsIHN1YmFzc2VtYmxpZXMuIFRoZSBhcy1idWlsdCBsaWZlY3ljbGUgcmVmZXJlbmNlcyBhbGwgY2hpbGQgaXRlbXMgYXMgbWFudWZhY3R1cmVkIGJ5IHRoZSBtYW51ZmFjdHVyZXIgcmVmZXJlbmNpbmcgb25seSBjaGlsZCBpdGVtcyBpbiBhbiBhcyBidWlsdCBsaWZlY3ljbGUgdGhlbXNlbHZlcywgZS5nLiBzZXJpYWwgcGFydHMgb3IgYmF0Y2hlcy4iLA0KICAidHlwZSIgOiAib2JqZWN0IiwNCiAgImNvbXBvbmVudHMiIDogew0KICAgICJzY2hlbWFzIiA6IHsNCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4LnNpbmdsZV9sZXZlbF9ib21fYXNfYnVpbHRfMS4wLjBfQ2F0ZW5hWElkVHJhaXRDaGFyYWN0ZXJpc3RpYyIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwcm92aWRlZCByZWd1bGFyIGV4cHJlc3Npb24gZW5zdXJlcyB0aGF0IHRoZSBVVUlEIGlzIGNvbXBvc2VkIG9mIGZpdmUgZ3JvdXBzIG9mIGNoYXJhY3RlcnMgc2VwYXJhdGVkIGJ5IGh5cGhlbnMsIGluIHRoZSBmb3JtIDgtNC00LTQtMTIgZm9yIGEgdG90YWwgb2YgMzYgY2hhcmFjdGVycyAoMzIgaGV4YWRlY2ltYWwgY2hhcmFjdGVycyBhbmQgNCBoeXBoZW5zKSwgb3B0aW9uYWxseSBwcmVmaXhlZCBieSBcInVybjp1dWlkOlwiIHRvIG1ha2UgaXQgYW4gSVJJLiIsDQogICAgICAgICJwYXR0ZXJuIiA6ICIoXlswLTlhLWZBLUZdezh9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezEyfSQpfChedXJuOnV1aWQ6WzAtOWEtZkEtRl17OH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17MTJ9JCkiDQogICAgICB9LA0KICAgICAgInVybl9iYW1tX2lvLm9wZW5tYW51ZmFjdHVyaW5nX2NoYXJhY3RlcmlzdGljXzIuMC4wX1RpbWVzdGFtcCIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAicGF0dGVybiIgOiAiLT8oWzEtOV1bMC05XXszLH18MFswLTldezN9KS0oMFsxLTldfDFbMC0yXSktKDBbMS05XXxbMTJdWzAtOV18M1swMV0pVCgoWzAxXVswLTldfDJbMC0zXSk6WzAtNV1bMC05XTpbMC01XVswLTldKFxcLlswLTldKyk/fCgyNDowMDowMChcXC4wKyk/KSkoWnwoXFwrfC0pKCgwWzAtOV18MVswLTNdKTpbMC01XVswLTldfDE0OjAwKSk/IiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJEZXNjcmliZXMgYSBQcm9wZXJ0eSB3aGljaCBjb250YWlucyB0aGUgZGF0ZSBhbmQgdGltZSB3aXRoIGFuIG9wdGlvbmFsIHRpbWV6b25lLiINCiAgICAgIH0sDQogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfYm9tX2FzX2J1aWx0XzEuMC4wX051bWJlck9mT2JqZWN0cyIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJudW1iZXIiLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlF1YW50aWZpYWJsZSBudW1iZXIgb2Ygb2JqZWN0cyBpbiByZWZlcmVuY2UgdG8gdGhlIG1lYXN1cmVtZW50VW5pdCINCiAgICAgIH0sDQogICAgICAidXJuX2JhbW1faW8ub3Blbm1hbnVmYWN0dXJpbmdfY2hhcmFjdGVyaXN0aWNfMi4wLjBfVW5pdFJlZmVyZW5jZSIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAicGF0dGVybiIgOiAiW2EtekEtWl0qOlthLXpBLVpdKyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzY3JpYmVzIGEgUHJvcGVydHkgY29udGFpbmluZyBhIHJlZmVyZW5jZSB0byBvbmUgb2YgdGhlIHVuaXRzIGluIHRoZSBVbml0IENhdGFsb2cuIg0KICAgICAgfSwNCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4LnNpbmdsZV9sZXZlbF9ib21fYXNfYnVpbHRfMS4wLjBfUXVhbnRpdHlDaGFyYWN0ZXJpc3RpYyIgOiB7DQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzY3JpYmVzIHRoZSBxdWFudGl0eSBpbiB3aGljaCB0aGUgY2hpbGQgaXRlbSBpcyBhc3NlbWJsZWQgaW4gdGhlIGdpdmVuIHBhcmVudCBpdGVtIGJ5IHByb3ZpZGluZyBhIHF1YW50aXR5IHZhbHVlIGFuZCB0aGUgbWVhc3VyZW1lbnQgdW5pdCBpbiB3aGljaCB0aGUgcXVhbnRpdHkgaXMgbWVhc3VyZWQuIiwNCiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsDQogICAgICAgICJwcm9wZXJ0aWVzIiA6IHsNCiAgICAgICAgICAicXVhbnRpdHlOdW1iZXIiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgbnVtYmVyIG9mIG9iamVjdHMgcmVsYXRlZCB0byB0aGUgbWVhc3VyZW1lbnQgdW5pdCIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfYm9tX2FzX2J1aWx0XzEuMC4wX051bWJlck9mT2JqZWN0cyINCiAgICAgICAgICB9LA0KICAgICAgICAgICJtZWFzdXJlbWVudFVuaXQiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJVbml0IG9mIE1lYXN1cmVtZW50IGZvciB0aGUgcXVhbnRpdHkgb2Ygc2VyaWFsaXplZCBvYmplY3RzIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5vcGVubWFudWZhY3R1cmluZ19jaGFyYWN0ZXJpc3RpY18yLjAuMF9Vbml0UmVmZXJlbmNlIg0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgInJlcXVpcmVkIiA6IFsgInF1YW50aXR5TnVtYmVyIiwgIm1lYXN1cmVtZW50VW5pdCIgXQ0KICAgICAgfSwNCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4LnNpbmdsZV9sZXZlbF9ib21fYXNfYnVpbHRfMS4wLjBfQnBuVHJhaXQiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJCdXNpbmVzcyBQYXJ0bmVyIE51bWJlciBSZWd1bGFyIEV4cHJlc3Npb24gYWxsb3dpbmcgb25seSBCUE5MIHdoaWNoIHN0YW5kcyBmb3IgYSBsZWdhbCBlbnRpdHkuIiwNCiAgICAgICAgInBhdHRlcm4iIDogIl4oQlBOTCkoWzAtOV17OH0pKFthLXpBLVowLTldezR9KSQiDQogICAgICB9LA0KICAgICAgInVybl9iYW1tX2lvLmNhdGVuYXguc2luZ2xlX2xldmVsX2JvbV9hc19idWlsdF8xLjAuMF9DaGlsZERhdGEiIDogew0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNhdGVuYS1YIElEIGFuZCBtZXRhIGRhdGEgb2YgdGhlIGFzc2VtYmxlZCBjaGlsZCBpdGVtLiIsDQogICAgICAgICJ0eXBlIiA6ICJvYmplY3QiLA0KICAgICAgICAicHJvcGVydGllcyIgOiB7DQogICAgICAgICAgImNyZWF0ZWRPbiIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRpbWVzdGFtcCB3aGVuIHRoZSByZWxhdGlvbiBiZXR3ZWVuIHRoZSBwYXJlbnQgaXRlbSBhbmQgdGhlIGNoaWxkIGl0ZW0gd2FzIGNyZWF0ZWQsIGUuZy4gd2hlbiB0aGUgc2VyaWFsaXplZCBjaGlsZCBwYXJ0IHdhcyBhc3NlbWJsZWQgaW50byB0aGUgZ2l2ZW4gcGFydC4iLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLm9wZW5tYW51ZmFjdHVyaW5nX2NoYXJhY3RlcmlzdGljXzIuMC4wX1RpbWVzdGFtcCINCiAgICAgICAgICB9LA0KICAgICAgICAgICJxdWFudGl0eSIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlF1YW50aXR5IG9mIHdoaWNoIHRoZSBjaGlsZCBpdGVtIGlzIGFzc2VtYmxlZCBpbnRvIHRoZSBwYXJlbnQgaXRlbS4gSW4gZ2VuZXJhbCBpdCBpcyAnMScgZm9yIHNlcmlhbGl6ZWQgcGFydHMuIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnNpbmdsZV9sZXZlbF9ib21fYXNfYnVpbHRfMS4wLjBfUXVhbnRpdHlDaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9LA0KICAgICAgICAgICJsYXN0TW9kaWZpZWRPbiIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRpbWVzdGFtcCB3aGVuIHRoZSBhc3NlbWJseSByZWxhdGlvbnNoaXAgYmV0d2VlbiBwYXJlbnQgaXRlbSBhbmQgY2hpbGQgaXRlbSB3YXMgbGFzdCBtb2RpZmllZC4iLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLm9wZW5tYW51ZmFjdHVyaW5nX2NoYXJhY3RlcmlzdGljXzIuMC4wX1RpbWVzdGFtcCINCiAgICAgICAgICB9LA0KICAgICAgICAgICJjYXRlbmFYSWQiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgQ2F0ZW5hLVggSUQgb2YgdGhlIGdpdmVuIHBhcnQgKGUuZy4gdGhlIGFzc2VtYmx5KSwgdmFsaWQgZm9yIHRoZSBDYXRlbmEtWCBkYXRhc3BhY2UuIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnNpbmdsZV9sZXZlbF9ib21fYXNfYnVpbHRfMS4wLjBfQ2F0ZW5hWElkVHJhaXRDaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9LA0KICAgICAgICAgICJidXNpbmVzc1BhcnRuZXIiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgc3VwcGxpZXIgb2YgdGhlIGdpdmVuIGNoaWxkIGl0ZW0uIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnNpbmdsZV9sZXZlbF9ib21fYXNfYnVpbHRfMS4wLjBfQnBuVHJhaXQiDQogICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICAicmVxdWlyZWQiIDogWyAiY3JlYXRlZE9uIiwgInF1YW50aXR5IiwgImNhdGVuYVhJZCIgXQ0KICAgICAgfSwNCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4LnNpbmdsZV9sZXZlbF9ib21fYXNfYnVpbHRfMS4wLjBfU2V0T2ZDaGlsZEl0ZW1zQ2hhcmFjdGVyaXN0aWMiIDogew0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlNldCBvZiBjaGlsZCBpdGVtcyB0aGUgcGFyZW50IGl0ZW0gaXMgYXNzZW1ibGVkIGJ5IChvbmUgc3RydWN0dXJhbCBsZXZlbCBkb3duKS4iLA0KICAgICAgICAidHlwZSIgOiAiYXJyYXkiLA0KICAgICAgICAiaXRlbXMiIDogew0KICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnNpbmdsZV9sZXZlbF9ib21fYXNfYnVpbHRfMS4wLjBfQ2hpbGREYXRhIg0KICAgICAgICB9LA0KICAgICAgICAidW5pcXVlSXRlbXMiIDogdHJ1ZQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgInByb3BlcnRpZXMiIDogew0KICAgICJjYXRlbmFYSWQiIDogew0KICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgQ2F0ZW5hLVggSUQgb2YgdGhlIGdpdmVuIHBhcnQgKGUuZy4gdGhlIGFzc2VtYmx5KSwgdmFsaWQgZm9yIHRoZSBDYXRlbmEtWCBkYXRhc3BhY2UuIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnNpbmdsZV9sZXZlbF9ib21fYXNfYnVpbHRfMS4wLjBfQ2F0ZW5hWElkVHJhaXRDaGFyYWN0ZXJpc3RpYyINCiAgICB9LA0KICAgICJjaGlsZEl0ZW1zIiA6IHsNCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiU2V0IG9mIGNoaWxkIGl0ZW1zLCBvZiB3aGljaCB0aGUgZ2l2ZW4gcGFyZW50IGl0ZW0gaXMgYXNzZW1ibGVkIGJ5IChvbmUgc3RydWN0dXJhbCBsZXZlbCBkb3duKS4iLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXguc2luZ2xlX2xldmVsX2JvbV9hc19idWlsdF8xLjAuMF9TZXRPZkNoaWxkSXRlbXNDaGFyYWN0ZXJpc3RpYyINCiAgICB9DQogIH0sDQogICJyZXF1aXJlZCIgOiBbICJjYXRlbmFYSWQiLCAiY2hpbGRJdGVtcyIgXQ0KfQ==
      dXJuOnNhbW06aW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGU6MS4wLjAjVHJhY3Rpb25CYXR0ZXJ5Q29kZQ: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIlRoZSB0cmFjdGlvbiBiYXR0ZXJ5IGNvZGUgaXMgYW4gaWRlbnRpZmljYXRpb24gY29kZSBmb3IgYW55IGF1dG9tb3RpdmUgdHJhY3Rpb24gYmF0dGVyeSwgdWx0cmFjYXBhY2l0b3IgYW5kIG90aGVyIHJlYWNoYXJnZWJsZSBlbmVyZ3kgc3RvcmFnZSBkZXZpY2UuIEl0IGFsbG93cyB0byBjYXJyeSBpbmZvcm1hdGlvbiBhcyByZXF1aXJlZCBieSB0aGUgTmF0aW9uYWwgU3RhbmRhcmQgb2YgdGhlIFBlb3BsZSdzIFJlcHVibGljIG9mIENoaW5hIGFjY29yZGluZyB0byBHQi9UIDM0MDE0LTIwMTcgcHVibGlzaGVkIGJ5IHRoZSBTdGFuZGFyZGl6YXRpb24gQWRtaW5pc3RyYXRpb24gb2YgQ2hpbmEgKFNBQykuIiwNCiAgInR5cGUiIDogIm9iamVjdCIsDQogICJjb21wb25lbnRzIiA6IHsNCiAgICAic2NoZW1hcyIgOiB7DQogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGVfMS4wLjBfVHJhY3Rpb25CYXR0ZXJ5Q29kZVRyYWl0IiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHRyYWN0aW9uIGJhdHRlcnkgY29kZSBhcyByZXF1aXJlZCBieSB0aGUgTmF0aW9uYWwgU3RhbmRhcmQgb2YgdGhlIFBlb3BsZSdzIFJlcHVibGljIG9mIENoaW5hIGFjY29yZGluZyB0byBHQi9UIDM0MDE0LTIwMTcgcHVibGlzaGVkIGJ5IHRoZSBTdGFuZGFyZGl6YXRpb24gQWRtaW5pc3RyYXRpb24gb2YgQ2hpbmEgKFNBQykuIEl0IGNhbiBoYXZlIGEgbGVuZ3RoIG9mIGVpdGhlciAyNCBvciAxOCBjaGFyYWN0ZXJzLiIsDQogICAgICAgICJwYXR0ZXJuIiA6ICIoXltBLVowLTldezN9W1BNQ117MX1bQS1HWl17MX1bQS1aMC05XXsyfVtBLVowLTldezd9WzEtOUEtR0gtTlBSLVldezF9WzEtOUEtQ117MX1bMC05QS1HSC1OUFItWV17MX1bMC05XXs3fSQpfCheW0EtWjAtOV17M31bUE1DXXsxfVtBLUdaXXsxfVtBLVowLTldezJ9WzEtOUEtR0gtTlBSLVldezF9WzEtOUEtQ117MX1bMC05QS1HSC1OUFItWV17MX1bMC05XXs3fVtSXXsxfVtQTUNdezF9JCkiDQogICAgICB9LA0KICAgICAgInVybl9iYW1tX2lvLmNhdGVuYXgudHJhY3Rpb25fYmF0dGVyeV9jb2RlXzEuMC4wX0NvbXBvbmVudFR5cGVDaGFyYWN0ZXJzdGljIiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJlbnVtIiA6IFsgInBhY2siLCAibW9kdWxlIiwgImNlbGwiIF0NCiAgICAgIH0sDQogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGVfMS4wLjBfVHJhY3Rpb25CYXR0ZXJ5Q29tcG9uZW50IiA6IHsNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIGJhdHRlcnkgY29tcG9uZW50IGxpa2UgYSBjZWxsIG9yIGEgbW9kdWxlLiIsDQogICAgICAgICJ0eXBlIiA6ICJvYmplY3QiLA0KICAgICAgICAicHJvcGVydGllcyIgOiB7DQogICAgICAgICAgInRyYWN0aW9uQmF0dGVyeUNvZGUiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUcmFjdGlvbiBCYXR0ZXJ5IENvZGUgaWRlbnRpZnlpbmcgYSBzaW5nbGUgdHJhY3Rpb24gYmF0dGVyeSBjb21wb25lbnQgbGlrZSBhIHBhY2ssIG1vZHVsZSBvciBjZWxsLiAiLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgudHJhY3Rpb25fYmF0dGVyeV9jb2RlXzEuMC4wX1RyYWN0aW9uQmF0dGVyeUNvZGVUcmFpdCINCiAgICAgICAgICB9LA0KICAgICAgICAgICJzdWJjb21wb25lbnRzIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU3ViY29tcG9uZW50cyBvZiB0aGUgY29tcG9uZW50LCBpZiBhcHBsaWNhYmxlLiBUaGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdHJhY3Rpb24gYmF0dGVyeSBjb2RlcyBhcmUgYXMgZm9sbG93czpcblxuSWYgdGhpcyB0cmFjdGlvbiBiYXR0ZXJ5IGNvZGUgaXMgZ2l2ZW4gZm9yIGEgY2VsbCBzdWJjb21wb25lbnRzIGFyZSBub3QgcmVxdWlyZWQuIFxuSWYgdGhpcyB0cmFjdGlvbiBiYXR0ZXJ5IGNvZGUgaXMgZ2l2ZW4gZm9yIGEgYmF0dGVyeSBtb2R1bGUgYSBsaXN0IG9mIGNlbGxzIGFyZSByZXF1aXJlZCB0byBiZSByZWdpc3RlcmVkIGFzIHN1YmNvbXBvbmVudHMuXG5JZiB0aGlzIHRyYWN0aW9uIGJhdHRlcnkgY29kZSBpcyBnaXZlbiBmb3IgYSBiYXR0ZXJ5IHBhY2sgYSBsaXN0IG9mIG1vZHVsZXMgYXJlIHJlcXVpcmVkIHRvIGJlIHJlZ2lzdGVyZWQgYXMgc3ViY29tcG9uZW50cyAoY29udGFpbmluZyBlYWNoIGEgbGlzdCBvZiBjZWxsIHN1YmNvbXBvbmVudHMgcmVzcGVjdGl2ZWx5KS4iLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgudHJhY3Rpb25fYmF0dGVyeV9jb2RlXzEuMC4wX0NvbXBvbmVudExpc3QiDQogICAgICAgICAgfSwNCiAgICAgICAgICAicHJvZHVjdFR5cGUiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdHlwZSBvZiB0aGUgYmF0dGVyeSBjb21wb25lbnQsIGUuZy4gYSBwYWNrLCBhIG1vZHVsZSBvciBhIGNlbGwuIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnRyYWN0aW9uX2JhdHRlcnlfY29kZV8xLjAuMF9Db21wb25lbnRUeXBlQ2hhcmFjdGVyc3RpYyINCiAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgICJyZXF1aXJlZCIgOiBbICJ0cmFjdGlvbkJhdHRlcnlDb2RlIiwgInByb2R1Y3RUeXBlIiBdDQogICAgICB9LA0KICAgICAgInVybl9iYW1tX2lvLmNhdGVuYXgudHJhY3Rpb25fYmF0dGVyeV9jb2RlXzEuMC4wX0NvbXBvbmVudExpc3QiIDogew0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkEgbGlzdCBvZiBiYXR0ZXJ5IGNvbXBvbmVudHMgbGlrZSBtb2R1bGVzIG9yIGNlbGxzLiIsDQogICAgICAgICJ0eXBlIiA6ICJhcnJheSIsDQogICAgICAgICJpdGVtcyIgOiB7DQogICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgudHJhY3Rpb25fYmF0dGVyeV9jb2RlXzEuMC4wX1RyYWN0aW9uQmF0dGVyeUNvbXBvbmVudCINCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgInByb3BlcnRpZXMiIDogew0KICAgICJ0cmFjdGlvbkJhdHRlcnlDb2RlIiA6IHsNCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiVHJhY3Rpb24gQmF0dGVyeSBDb2RlIGlkZW50aWZ5aW5nIGEgc2luZ2xlIHRyYWN0aW9uIGJhdHRlcnkgY29tcG9uZW50IGxpa2UgYSBwYWNrLCBtb2R1bGUgb3IgY2VsbC4gIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnRyYWN0aW9uX2JhdHRlcnlfY29kZV8xLjAuMF9UcmFjdGlvbkJhdHRlcnlDb2RlVHJhaXQiDQogICAgfSwNCiAgICAic3ViY29tcG9uZW50cyIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIlN1YmNvbXBvbmVudHMgb2YgdGhlIGNvbXBvbmVudCwgaWYgYXBwbGljYWJsZS4gVGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRyYWN0aW9uIGJhdHRlcnkgY29kZXMgYXJlIGFzIGZvbGxvd3M6XG5cbklmIHRoaXMgdHJhY3Rpb24gYmF0dGVyeSBjb2RlIGlzIGdpdmVuIGZvciBhIGNlbGwgc3ViY29tcG9uZW50cyBhcmUgbm90IHJlcXVpcmVkLiBcbklmIHRoaXMgdHJhY3Rpb24gYmF0dGVyeSBjb2RlIGlzIGdpdmVuIGZvciBhIGJhdHRlcnkgbW9kdWxlIGEgbGlzdCBvZiBjZWxscyBhcmUgcmVxdWlyZWQgdG8gYmUgcmVnaXN0ZXJlZCBhcyBzdWJjb21wb25lbnRzLlxuSWYgdGhpcyB0cmFjdGlvbiBiYXR0ZXJ5IGNvZGUgaXMgZ2l2ZW4gZm9yIGEgYmF0dGVyeSBwYWNrIGEgbGlzdCBvZiBtb2R1bGVzIGFyZSByZXF1aXJlZCB0byBiZSByZWdpc3RlcmVkIGFzIHN1YmNvbXBvbmVudHMgKGNvbnRhaW5pbmcgZWFjaCBhIGxpc3Qgb2YgY2VsbCBzdWJjb21wb25lbnRzIHJlc3BlY3RpdmVseSkuIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnRyYWN0aW9uX2JhdHRlcnlfY29kZV8xLjAuMF9Db21wb25lbnRMaXN0Ig0KICAgIH0sDQogICAgInByb2R1Y3RUeXBlIiA6IHsNCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHR5cGUgb2YgdGhlIGJhdHRlcnkgY29tcG9uZW50LCBlLmcuIGEgcGFjaywgYSBtb2R1bGUgb3IgYSBjZWxsLiIsDQogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGVfMS4wLjBfQ29tcG9uZW50VHlwZUNoYXJhY3RlcnN0aWMiDQogICAgfQ0KICB9LA0KICAicmVxdWlyZWQiIDogWyAidHJhY3Rpb25CYXR0ZXJ5Q29kZSIsICJwcm9kdWN0VHlwZSIgXQ0KfQ==
      # urn:samm:io.catenax.batch:2.0.0#Batch
      dXJuOnNhbW06aW8uY2F0ZW5heC5iYXRjaDoyLjAuMCNCYXRjaA: 
      # urn:samm:io.catenax.just_in_sequence_part:1.0.0#JustInSequencePart
      dXJuOnNhbW06aW8uY2F0ZW5heC5qdXN0X2luX3NlcXVlbmNlX3BhcnQ6MS4wLjAjSnVzdEluU2VxdWVuY2VQYXJ0: 
      # urn:samm:io.catenax.part_as_planned:1.0.1#PartAsPlanned
      dXJuOnNhbW06aW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWQ6MS4wLjEjUGFydEFzUGxhbm5lZA: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIkEgUGFydCBhcyBQbGFubmVkIHJlcHJlc2VudHMgYW4gaXRlbSBpbiB0aGUgQ2F0ZW5hLVggQmlsbCBvZiBNYXRlcmlhbCAoQk9NKSBpbiBBcy1QbGFubmVkIGxpZmVjeWNsZSBzdGF0dXMgaW4gYSBzcGVjaWZpYyB2ZXJzaW9uLiAiLA0KICAidHlwZSIgOiAib2JqZWN0IiwNCiAgImNvbXBvbmVudHMiIDogew0KICAgICJzY2hlbWFzIiA6IHsNCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8xLjAuMV9DYXRlbmFYSWRUcmFpdCIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwcm92aWRlZCByZWd1bGFyIGV4cHJlc3Npb24gZW5zdXJlcyB0aGF0IHRoZSBVVUlEIGlzIGNvbXBvc2VkIG9mIGZpdmUgZ3JvdXBzIG9mIGNoYXJhY3RlcnMgc2VwYXJhdGVkIGJ5IGh5cGhlbnMsIGluIHRoZSBmb3JtIDgtNC00LTQtMTIgZm9yIGEgdG90YWwgb2YgMzYgY2hhcmFjdGVycyAoMzIgaGV4YWRlY2ltYWwgY2hhcmFjdGVycyBhbmQgNCBoeXBoZW5zKS4iLA0KICAgICAgICAicGF0dGVybiIgOiAiKF5bMC05YS1mQS1GXXs4fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXsxMn0kKXwoXnVybjp1dWlkOlswLTlhLWZBLUZdezh9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezEyfSQpIg0KICAgICAgfSwNCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8xLjAuMV9QYXJ0SWRDaGFyYWN0ZXJpc3RpYyIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwYXJ0IElEIGlzIGEgbXVsdGktY2hhcmFjdGVyIHN0cmluZywgdXN1c2FsbHkgYXNzaWduZWQgYnkgYW4gRVJQIHN5c3RlbSINCiAgICAgIH0sDQogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWRfMS4wLjFfUGFydE5hbWVDaGFyYWN0ZXJpc3RpYyIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlBhcnQgTmFtZSBpbiBzdHJpbmcgZm9ybWF0IGZyb20gdGhlIHJlc3BlY3RpdmUgc3lzdGVtIGluIHRoZSB2YWx1ZSBjaGFpbiINCiAgICAgIH0sDQogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWRfMS4wLjFfQ2xhc3NpZmljYXRpb25FbnVtZXJhdGlvbkNoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBwYXJ0IHR5cGUgbXVzdCBiZSBwbGFjZWQgaW50byBvbmUgb2YgdGhlIGZvbGxvd2luZyBjbGFzc2VzOiAnY29tcG9uZW50JywgJ3Byb2R1Y3QnLCAnc29mdHdhcmUnLCDigJhhc3NlbWJseeKAmSwgJ3Rvb2wnLCBvciAncmF3IG1hdGVyaWFsJy4iLA0KICAgICAgICAiZW51bSIgOiBbICJwcm9kdWN0IiwgInJhdyBtYXRlcmlhbCIsICJzb2Z0d2FyZSIsICJhc3NlbWJseSIsICJ0b29sIiwgImNvbXBvbmVudCIgXQ0KICAgICAgfSwNCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8xLjAuMV9QYXJ0VHlwZUluZm9ybWF0aW9uQ2hhcmFjdGVyaXN0aWMiIDogew0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIHBhcnQgdHlwZSIsDQogICAgICAgICJ0eXBlIiA6ICJvYmplY3QiLA0KICAgICAgICAicHJvcGVydGllcyIgOiB7DQogICAgICAgICAgIm1hbnVmYWN0dXJlclBhcnRJZCIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlBhcnQgSUQgYXMgYXNzaWduZWQgYnkgdGhlIG1hbnVmYWN0dXJlciBvZiB0aGUgcGFydC4gVGhlIFBhcnQgSUQgaWRlbnRpZmllcyB0aGUgcGFydCBpbiB0aGUgbWFudWZhY3R1cmVyYHMgZGF0YXNwYWNlLiBUaGUgUGFydCBJRCByZWZlcmVuY2VzIGEgc3BlY2lmaWMgdmVyc2lvbiBvZiBhIHBhcnQuIFRoZSB2ZXJzaW9uIG51bWJlciBtdXN0IGJlIGluY2x1ZGVkIGluIHRoZSBQYXJ0IElEIGlmIGl0IGlzIGF2YWlsYWJsZS5cblxuVGhlIFBhcnQgSUQgZG9lcyBub3QgcmVmZXJlbmNlIGEgc3BlY2lmaWMgaW5zdGFuY2Ugb2YgYSBwYXJ0IGFuZCBtdXN0IG5vdCBiZSBjb25mdXNlZCB3aXRoIHRoZSBzZXJpYWwgbnVtYmVyLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWRfMS4wLjFfUGFydElkQ2hhcmFjdGVyaXN0aWMiDQogICAgICAgICAgfSwNCiAgICAgICAgICAibmFtZUF0TWFudWZhY3R1cmVyIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiTmFtZSBvZiB0aGUgcGFydCBhcyBhc3NpZ25lZCBieSB0aGUgbWFudWZhY3R1cmVyIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8xLjAuMV9QYXJ0TmFtZUNoYXJhY3RlcmlzdGljIg0KICAgICAgICAgIH0sDQogICAgICAgICAgImNsYXNzaWZpY2F0aW9uIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGNsYXNzaWZpY2F0aW9uIG9mIHRoZSBwYXJ0IHR5cGUgYWNjb3JkaW5nIHRvIFNURVAgc3RhbmRhcmQgZGVmaW5pdGlvbiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWRfMS4wLjFfQ2xhc3NpZmljYXRpb25FbnVtZXJhdGlvbkNoYXJhY3RlcmlzdGljIg0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgInJlcXVpcmVkIiA6IFsgIm1hbnVmYWN0dXJlclBhcnRJZCIsICJuYW1lQXRNYW51ZmFjdHVyZXIiLCAiY2xhc3NpZmljYXRpb24iIF0NCiAgICAgIH0sDQogICAgICAidXJuX2JhbW1faW8ub3Blbm1hbnVmYWN0dXJpbmdfY2hhcmFjdGVyaXN0aWNfMi4wLjBfVGltZXN0YW1wIiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJwYXR0ZXJuIiA6ICItPyhbMS05XVswLTldezMsfXwwWzAtOV17M30pLSgwWzEtOV18MVswLTJdKS0oMFsxLTldfFsxMl1bMC05XXwzWzAxXSlUKChbMDFdWzAtOV18MlswLTNdKTpbMC01XVswLTldOlswLTVdWzAtOV0oXFwuWzAtOV0rKT98KDI0OjAwOjAwKFxcLjArKT8pKShafChcXCt8LSkoKDBbMC05XXwxWzAtM10pOlswLTVdWzAtOV18MTQ6MDApKT8iLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkRlc2NyaWJlcyBhIFByb3BlcnR5IHdoaWNoIGNvbnRhaW5zIHRoZSBkYXRlIGFuZCB0aW1lIHdpdGggYW4gb3B0aW9uYWwgdGltZXpvbmUuIg0KICAgICAgfSwNCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4LnBhcnRfYXNfcGxhbm5lZF8xLjAuMV9WYWxpZGl0eVBlcmlvZENoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDaGFyYWN0ZXJpc3RpYyB0byBkZWZpbmUgYSBjb250aW51b3VzIHZhbGlkaXR5IHBlcmlvZC4iLA0KICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwNCiAgICAgICAgInByb3BlcnRpZXMiIDogew0KICAgICAgICAgICJ2YWxpZEZyb20iIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTdGFydCBkYXRlIG9mIHZhbGlkaXR5IHBlcmlvZCIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8ub3Blbm1hbnVmYWN0dXJpbmdfY2hhcmFjdGVyaXN0aWNfMi4wLjBfVGltZXN0YW1wIg0KICAgICAgICAgIH0sDQogICAgICAgICAgInZhbGlkVG8iIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJFbmQgZGF0ZSBvZiB2YWxpZGl0eSBwZXJpb2QiLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLm9wZW5tYW51ZmFjdHVyaW5nX2NoYXJhY3RlcmlzdGljXzIuMC4wX1RpbWVzdGFtcCINCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogIH0sDQogICJwcm9wZXJ0aWVzIiA6IHsNCiAgICAiY2F0ZW5hWElkIiA6IHsNCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGZ1bGx5IGFub255bW91cyBDYXRlbmEtWCBJRCBvZiB0aGUgc2VyaWFsaXplZCBwYXJ0LCB2YWxpZCBmb3IgdGhlIENhdGVuYS1YIGRhdGFzcGFjZS4iLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgucGFydF9hc19wbGFubmVkXzEuMC4xX0NhdGVuYVhJZFRyYWl0Ig0KICAgIH0sDQogICAgInBhcnRUeXBlSW5mb3JtYXRpb24iIDogew0KICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgcGFydCB0eXBlIGZyb20gd2hpY2ggdGhlIHNlcmlhbGl6ZWQgcGFydCBoYXMgYmVlbiBpbnN0YW50aWF0ZWQiLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgucGFydF9hc19wbGFubmVkXzEuMC4xX1BhcnRUeXBlSW5mb3JtYXRpb25DaGFyYWN0ZXJpc3RpYyINCiAgICB9LA0KICAgICJ2YWxpZGl0eVBlcmlvZCIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwZXJpb2Qgb2YgdGltZSBkdXJpbmcgd2hpY2ggdGhlIFBhcnQgaXMgb2ZmZXJlZCBieSB0aGUgbWFudWZhY3R1cmVyIGFuZCBjYW4gYmUgcHVyY2hhc2VkIGJ5IGN1c3RvbWVycy4iLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgucGFydF9hc19wbGFubmVkXzEuMC4xX1ZhbGlkaXR5UGVyaW9kQ2hhcmFjdGVyaXN0aWMiDQogICAgfQ0KICB9LA0KICAicmVxdWlyZWQiIDogWyAiY2F0ZW5hWElkIiwgInBhcnRUeXBlSW5mb3JtYXRpb24iIF0NCn0=
      # urn:samm:io.catenax.material_for_recycling:1.1.0#MaterialForRecycling
      dXJuOnNhbW06aW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfcmVjeWNsaW5nOjEuMS4wI01hdGVyaWFsRm9yUmVjeWNsaW5n: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIlRoaXMgbW9kZWwgZGVwaWN0cyBhIG1hdGVyaWFsIGFzIHNlZW4gYnkgdGhlIHJlY3ljbGVyIGF0IHRoZSBlbmQgb2YgdGhlIGxpZmVjeWNsZSBvZiBhIHByb2R1Y3QuIElmIGEgbWF0ZXJpYWwgY29uc2lzdHMgb2Ygb25seSBvbmUgc2luZ2xlIGNvbXBvbmVudCB0aGUgbmFtZSBhbmQgY2xhc3MgZm9yIHRoZSBhc3BlY3QgYXJlIG5vdCB1c2VkIiwNCiAgInR5cGUiIDogIm9iamVjdCIsDQogICJjb21wb25lbnRzIiA6IHsNCiAgICAic2NoZW1hcyIgOiB7DQogICAgICAidXJuX2JhbW1faW8ub3Blbm1hbnVmYWN0dXJpbmdfY2hhcmFjdGVyaXN0aWNfMi4wLjBfVGV4dCIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkRlc2NyaWJlcyBhIFByb3BlcnR5IHdoaWNoIGNvbnRhaW5zIHBsYWluIHRleHQuIFRoaXMgaXMgaW50ZW5kZWQgZXhjbHVzaXZlbHkgZm9yIGh1bWFuIHJlYWRhYmxlIHN0cmluZ3MsIG5vdCBmb3IgaWRlbnRpZmllcnMsIG1lYXN1cmVtZW50IHZhbHVlcywgZXRjLiINCiAgICAgIH0sDQogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfcmVjeWNsaW5nXzEuMS4wX01hdGVyaWFsQ2xhc3MiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDbGFzcyBhY2NvcmRpbmcgdG8gdGhlIHJlZmVybmNlZCBzdGFuZGFyZCB0aGUgbWF0ZXJpYWwgYmVsb25ncyB0by4gVGhlIElNRFMgcmVjb21tZW5kYXRpb25zIGFuZCB0aGUgSU1EUyBydWxlcyBhcmUgZXhjbHVzZXZpbHkgYWNjZXNzaWJsZSB3aXRoaW4gdGhlIElNRFMgcG9ydGFsIHRvIG1lbWJlcnMgb2YgdGhlIElNRFMgYXNzb2NpYXRpb24uIEluIG9yZGVyIHRvIGFjY2VzcyB0aGUgZGF0YSBvbmUgbmVlZHMgdG8gYmUgbWVtYmVyIG9mIHRoZSBhc3NvY2lhdGlvbi4iDQogICAgICB9LA0KICAgICAgInVybl9iYW1tX2lvLmNhdGVuYXgubWF0ZXJpYWxfZm9yX3JlY3ljbGluZ18xLjEuMF9BZ2dyZWdhdGVTdGF0ZSIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZW51bSIgOiBbICJzb2xpZCIsICJsaXF1aWQiLCAiZ2FzZW5vdXMiIF0NCiAgICAgIH0sDQogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfcmVjeWNsaW5nXzEuMS4wX1BlcmNlbnRhZ2UiIDogew0KICAgICAgICAidHlwZSIgOiAibnVtYmVyIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJQZXJjZW50YWdlIG9mIGFscmVhZHkgcmVjeWNsZWQgbWF0ZXJpYWwgY29udGFpbmVkLiINCiAgICAgIH0sDQogICAgICAidXJuX2JhbW1faW8ub3Blbm1hbnVmYWN0dXJpbmdfY2hhcmFjdGVyaXN0aWNfMi4wLjBfVW5pdFJlZmVyZW5jZSIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAicGF0dGVybiIgOiAiW2EtekEtWl0qOlthLXpBLVpdKyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzY3JpYmVzIGEgUHJvcGVydHkgY29udGFpbmluZyBhIHJlZmVyZW5jZSB0byBvbmUgb2YgdGhlIHVuaXRzIGluIHRoZSBVbml0IENhdGFsb2cuIg0KICAgICAgfSwNCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4Lm1hdGVyaWFsX2Zvcl9yZWN5Y2xpbmdfMS4xLjBfVmFsdWUiIDogew0KICAgICAgICAidHlwZSIgOiAibnVtYmVyIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJRdWFudGlmaWFibGUgdmFsdWUgYXMgZG91YmxlIGluIHJlZmVyZW5jZSB0byB0aGUgbWVhc3VyZW1lbnRVbml0Ig0KICAgICAgfSwNCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4Lm1hdGVyaWFsX2Zvcl9yZWN5Y2xpbmdfMS4xLjBfUXVhbnRpdHlDaGFyYWN0ZXJpc3RpYyIgOiB7DQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAicXVhbnRpdHkgY2hhcmFjdGVyaXN0aWMgZm9yIHRoZSBtYXRlcmlhbCBleHByZXNzZWQgaW4gdmFsdWUgYW5kIHVuaXQiLA0KICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwNCiAgICAgICAgInByb3BlcnRpZXMiIDogew0KICAgICAgICAgICJ1bml0IiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVW5pdCBvZiBNZWFzdXJlbWVudCBmb3IgdGhlIHF1YW50aXR5IG9mIHNlcmlhbGl6ZWQgb2JqZWN0cy5cblRoZSByZWNvbW1lbmRlZCB1bml0cyBhcmUgdGhlIFNJIHVuaXRzIHN1Y2ggYXMgdW5pdDpraWxvZ3JhbSBvciAgYWRkaXRpb25hbCB1bml0OnBlcmNlbnQiLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLm9wZW5tYW51ZmFjdHVyaW5nX2NoYXJhY3RlcmlzdGljXzIuMC4wX1VuaXRSZWZlcmVuY2UiDQogICAgICAgICAgfSwNCiAgICAgICAgICAidmFsdWUiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJNZWFzdXJlbWVudCB2YWx1ZSBhcyBhIGRvdWJsZS4gVGhlIHVuaXQgaXMgc2F2ZWQgaW4gdGhlIHByb3BlcnR5IG1lYXN1cmVtZW50VW5pdCIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfcmVjeWNsaW5nXzEuMS4wX1ZhbHVlIg0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgInJlcXVpcmVkIiA6IFsgInVuaXQiLCAidmFsdWUiIF0NCiAgICAgIH0sDQogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfcmVjeWNsaW5nXzEuMS4wX0NvbXBvbmVudEVudGl0eSIgOiB7DQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHByb3BlcnRpZXMgdGhhdCBkZXNjcmliZSBhIGNvbXBvbmVudCIsDQogICAgICAgICJ0eXBlIiA6ICJvYmplY3QiLA0KICAgICAgICAicHJvcGVydGllcyIgOiB7DQogICAgICAgICAgImFnZ3JlZ2F0ZVN0YXRlIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGFnZ3JlZ2F0ZSBzdGF0ZSB0aGUgbWF0ZXJpYWxpcyBpbiBhdCB0aGUgdGltZXBvaW50IHRoZSBpdGVtIGlzIGRpc2Fzc2VtYmxlZCIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfcmVjeWNsaW5nXzEuMS4wX0FnZ3JlZ2F0ZVN0YXRlIg0KICAgICAgICAgIH0sDQogICAgICAgICAgInJlY3ljbGVkQ29udGVudCIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkluZGljYXRlcyBpZiB0aGUgbWF0ZXJpYWwgd2FzIGlzIHJlY3ljbGVkLiBQZXJjZW50YWdlIG9mIGhvdyBtdWNoIG9mIHRoZSBtYXRlcmlhbCB3YXMgcmVjeWNsZWQuIFRoaXMgY2FuIGJlIGFuIGFnZ3JlZ2F0aW9uIHJlZ2FyZGluZyB0aGUgbWF0ZXJpYWxzIGJlbG93LiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfcmVjeWNsaW5nXzEuMS4wX1BlcmNlbnRhZ2UiDQogICAgICAgICAgfSwNCiAgICAgICAgICAibWF0ZXJpYWxBYmJyZXZpYXRpb24iIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIHNob3J0IGFiYnJldmlhdGlvbiBvZiB0aGUgbWF0ZXJpYWxOYW1lIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5vcGVubWFudWZhY3R1cmluZ19jaGFyYWN0ZXJpc3RpY18yLjAuMF9UZXh0Ig0KICAgICAgICAgIH0sDQogICAgICAgICAgIm1hdGVyaWFsQ2xhc3MiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgY2xhc3Mgb2YgYSBtYXRlcmlhbCBmb2xsb3dpbmcgdGhlIHJlZmVyZW5jZWQgc3RhbmRhcmQuIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4Lm1hdGVyaWFsX2Zvcl9yZWN5Y2xpbmdfMS4xLjBfTWF0ZXJpYWxDbGFzcyINCiAgICAgICAgICB9LA0KICAgICAgICAgICJtYXRlcmlhbE5hbWUiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgY29tbWVyY2lhbCBuYW1lIG9mIGEgbWF0ZXJpYWwiLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLm9wZW5tYW51ZmFjdHVyaW5nX2NoYXJhY3RlcmlzdGljXzIuMC4wX1RleHQiDQogICAgICAgICAgfSwNCiAgICAgICAgICAicXVhbnRpdHkiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJxdWFudGl0eSBvZiB0aGUgbWF0ZXJpYWwgZXhwcmVzc2VkIGluIHZhbHVlIGFuZCB1bml0IiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4Lm1hdGVyaWFsX2Zvcl9yZWN5Y2xpbmdfMS4xLjBfUXVhbnRpdHlDaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgICJyZXF1aXJlZCIgOiBbICJtYXRlcmlhbENsYXNzIiwgIm1hdGVyaWFsTmFtZSIgXQ0KICAgICAgfSwNCiAgICAgICJ1cm5fYmFtbV9pby5jYXRlbmF4Lm1hdGVyaWFsX2Zvcl9yZWN5Y2xpbmdfMS4xLjBfQ29tcG9uZW50Q2hhcmFjdGVyaXN0aWMiIDogew0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkRlc2NyaWJlcyB0aGUgY29uc2lzdGVuY3kiLA0KICAgICAgICAidHlwZSIgOiAiYXJyYXkiLA0KICAgICAgICAiaXRlbXMiIDogew0KICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4Lm1hdGVyaWFsX2Zvcl9yZWN5Y2xpbmdfMS4xLjBfQ29tcG9uZW50RW50aXR5Ig0KICAgICAgICB9LA0KICAgICAgICAidW5pcXVlSXRlbXMiIDogdHJ1ZQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgInByb3BlcnRpZXMiIDogew0KICAgICJtYXRlcmlhbE5hbWUiIDogew0KICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgY29tbWVyY2lhbCBuYW1lIG9mIGEgbWF0ZXJpYWwiLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLm9wZW5tYW51ZmFjdHVyaW5nX2NoYXJhY3RlcmlzdGljXzIuMC4wX1RleHQiDQogICAgfSwNCiAgICAibWF0ZXJpYWxDbGFzcyIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBjbGFzcyBvZiBhIG1hdGVyaWFsIGZvbGxvd2luZyB0aGUgcmVmZXJlbmNlZCBzdGFuZGFyZC4iLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgubWF0ZXJpYWxfZm9yX3JlY3ljbGluZ18xLjEuMF9NYXRlcmlhbENsYXNzIg0KICAgIH0sDQogICAgImNvbXBvbmVudCIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIkNvbXBvbmVudHMgdGhlIG1hdGVyaWFsIGNvbnNpc3RzIG9mIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4Lm1hdGVyaWFsX2Zvcl9yZWN5Y2xpbmdfMS4xLjBfQ29tcG9uZW50Q2hhcmFjdGVyaXN0aWMiDQogICAgfSwNCiAgICAicmVjeWNsZWRDb250ZW50IiA6IHsNCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiSW5kaWNhdGVzIGlmIHRoZSBtYXRlcmlhbCB3YXMgaXMgcmVjeWNsZWQuIFBlcmNlbnRhZ2Ugb2YgaG93IG11Y2ggb2YgdGhlIG1hdGVyaWFsIHdhcyByZWN5Y2xlZC4gVGhpcyBjYW4gYmUgYW4gYWdncmVnYXRpb24gcmVnYXJkaW5nIHRoZSBtYXRlcmlhbHMgYmVsb3cuIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4Lm1hdGVyaWFsX2Zvcl9yZWN5Y2xpbmdfMS4xLjBfUGVyY2VudGFnZSINCiAgICB9DQogIH0sDQogICJyZXF1aXJlZCIgOiBbICJjb21wb25lbnQiIF0NCn0=
      # urn:samm:io.catenax.serial_part:2.0.0#CertificateOfDestruction
      dXJuOnNhbW06aW8uY2F0ZW5heC5zZXJpYWxfcGFydDoyLjAuMCNDZXJ0aWZpY2F0ZU9mRGVzdHJ1Y3Rpb24: 
      # urn:samm:io.catenax.single_level_usage_as_planned:2.0.0#SingleLevelUsageAsPlanned
      dXJuOnNhbW06aW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfdXNhZ2VfYXNfcGxhbm5lZDoyLjAuMCNTaW5nbGVMZXZlbFVzYWdlQXNQbGFubmVk: 
      # urn:samm:io.catenax.idconversion:2.0.0#IdConversion
      dXJuOnNhbW06aW8uY2F0ZW5heC5pZGNvbnZlcnNpb246Mi4wLjAjSWRDb252ZXJzaW9u: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIlRoZSBJZENvbnZlcnNpb24gYXNwZWN0IGRlYWxzIHdpdGggdGhlIENvbnZlcnNpb24gb2YgKHZlaGljbGUsIGdsb2JhbCkgSWRlbnRpZmllcnMgbGlrZSBWSU5zIGludG8gUHNldWRvbnltcyB3aGljaCBhcmUgbG9jYXRlZCBpbiBhbiBPRU0gZG9tYWluIChWQU5zLCBVVUlEcyBhbmQgb3RoZXIgY29uY2VwdHMpIGFuZCB2aWNlIHZlcnNhLiBBcyB0aGVyZSBhcmUgbXVsdGlwbGUgb3B0aW9ucyBmb3IgcmVwcmVzZW50aW5nIElkZW50aWZpZXJzIGFuZCBwZXJmb3JtaW5nIFBzZXVkb255bWl6YXRpb24sIHRoaXMgbW9kZWwgdXNlcyBhIGNvbWJpbmF0aW9uIG9mIHVucXVhbGlmaWVkIHZhbHVlcyBmb3IgaWRlbnRpZmllcnMgcGFpcmVkIHdpdGggbmFtZXNwYWNlcyAoZG9tYWlucywga2V5cykuIiwNCiAgInR5cGUiIDogIm9iamVjdCIsDQogICJwcm9wZXJ0aWVzIiA6IHsgfQ0KfQ==
      # urn:samm:io.catenax.certificate_of_dismantler:1.0.1#CertificateOfDismantler
      dXJuOnNhbW06aW8uY2F0ZW5heC5jZXJ0aWZpY2F0ZV9vZl9kaXNtYW50bGVyOjEuMC4xI0NlcnRpZmljYXRlT2ZEaXNtYW50bGVy: 
      # urn:samm:io.catenax.eol_story:2.0.0#EndOfLife
      dXJuOnNhbW06aW8uY2F0ZW5heC5lb2xfc3Rvcnk6Mi4wLjAjRW5kT2ZMaWZl: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIkFzcGVjdCBmb3IgRW5kIG9mIExpZmUgU3RvcnkgZm9yIHRoZSBEaXNtYW50bGVyIiwNCiAgInR5cGUiIDogIm9iamVjdCIsDQogICJjb21wb25lbnRzIiA6IHsNCiAgICAic2NoZW1hcyIgOiB7DQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5lb2xfc3RvcnlfMi4wLjBfRGlzYXNzZW1ibHlTdGF0dXMiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJQb3NzaWJsZSBzdGF0dXMgb2YgZGlzYXNzZW1ibHkiLA0KICAgICAgICAiZW51bSIgOiBbICJhc3NlbWJsZWQiLCAiZGlzYXNzZW1ibGVkIiBdDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguZW9sX3N0b3J5XzIuMC4wX0hlYWx0aFN0YXR1cyIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlBvc3NpYmxlIHN0YXR1cyBvZiBjb25kaXRpb24gb2YgYSB2ZWhpY2xlIG9yIHBhcnQuIiwNCiAgICAgICAgImVudW0iIDogWyAiaW4gcnVubmluZyBjb25kaXRpb24iLCAicmVwYWlyIHJlcXVpcmVkIiwgImJyb2tlbiIsICJub3QgdGVzdGVkIiwgImluY29tcGxldGUiIF0NCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5lb2xfc3RvcnlfMi4wLjBfUmVjeWNsaW5nU3RhdHVzIiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiUG9zc2libGUgc3RhdHVzIGF1ZiBhIHZlaGljbGUgb3IgcGFydCIsDQogICAgICAgICJlbnVtIiA6IFsgInJlY3ljbGVkIiwgIm5vdCByZWN5Y2xlZCIgXQ0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9vcmcuZWNsaXBzZS5lc21mLnNhbW1fY2hhcmFjdGVyaXN0aWNfMi4xLjBfVGltZXN0YW1wIiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJwYXR0ZXJuIiA6ICItPyhbMS05XVswLTldezMsfXwwWzAtOV17M30pLSgwWzEtOV18MVswLTJdKS0oMFsxLTldfFsxMl1bMC05XXwzWzAxXSlUKChbMDFdWzAtOV18MlswLTNdKTpbMC01XVswLTldOlswLTVdWzAtOV0oXFwuWzAtOV0rKT98KDI0OjAwOjAwKFxcLjArKT8pKShafChcXCt8LSkoKDBbMC05XXwxWzAtM10pOlswLTVdWzAtOV18MTQ6MDApKT8iLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkRlc2NyaWJlcyBhIFByb3BlcnR5IHdoaWNoIGNvbnRhaW5zIHRoZSBkYXRlIGFuZCB0aW1lIHdpdGggYW4gb3B0aW9uYWwgdGltZXpvbmUuIg0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9vcmcuZWNsaXBzZS5lc21mLnNhbW1fY2hhcmFjdGVyaXN0aWNfMi4xLjBfQm9vbGVhbiIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJib29sZWFuIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJSZXByZXNlbnRzIGEgYm9vbGVhbiB2YWx1ZSAoaS5lLiBhIFwiZmxhZ1wiKS4iDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguZW9sX3N0b3J5XzIuMC4wX0xhc3RNaWxlYWdlIiA6IHsNCiAgICAgICAgInR5cGUiIDogIm51bWJlciINCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5lb2xfc3RvcnlfMi4wLjBfU3BhcmVQYXJ0UXVhbGl0eSIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlBvc3NpYmxlIHN0YXR1cyBvZiBjb25kaXRpb246IEE9cXVhbGl0eSB2ZXJ5IGdvb2Q7IEI9cXVhbGl0eSBub3JtYWwgdXNlZDsgQz1xdWFsaXR5IGRlZmVjdGl2ZSBvciB3aXRoIGRlZmVjdHM7IE49bmV3IiwNCiAgICAgICAgImVudW0iIDogWyAiQSIsICJCIiwgIkMiLCAiTiIgXQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgInByb3BlcnRpZXMiIDogew0KICAgICJkaXNhc3NlbWJseVN0YXR1cyIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIkluZGljYXRlcyB0aGUgc3RhdHVzIG9mIGRpc2Fzc2VtYmx5IiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LmVvbF9zdG9yeV8yLjAuMF9EaXNhc3NlbWJseVN0YXR1cyINCiAgICB9LA0KICAgICJoZWFsdGhTdGF0dXMiIDogew0KICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgaGVhbHRoIGNvbmRpdGlvbiBvZiB0aGUgdmVoaWNsZSBvciBzcGFyZSBwYXJ0LiIsDQogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5lb2xfc3RvcnlfMi4wLjBfSGVhbHRoU3RhdHVzIg0KICAgIH0sDQogICAgInJlY3ljbGluZ1N0YXR1cyIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSByZWN5Y2xpbmcgc3RhdHVzIG9mIGEgdmVoaWNsZSBvciBwYXJ0LiIsDQogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5lb2xfc3RvcnlfMi4wLjBfUmVjeWNsaW5nU3RhdHVzIg0KICAgIH0sDQogICAgImRhdGVPZlJlY2VwdGlvbkdNVCIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIkdpdmVzIHRoZSBkYXRlIG9mIHJlY2VwdGlvbiBvZiB0aGUgdmVoaWNsZSBpbiBHTVQgdGltZSB6b25lIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9vcmcuZWNsaXBzZS5lc21mLnNhbW1fY2hhcmFjdGVyaXN0aWNfMi4xLjBfVGltZXN0YW1wIg0KICAgIH0sDQogICAgImNlcnRpZmljYXRlT2ZEZXN0cnVjdGlvbiIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIkluZGljYXRlcyBpZiBhbiBjZXJ0aWZpY2F0ZSBvZiBkZXN0cnVjdGlvbiBpcyBwcmVzZW50IiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9vcmcuZWNsaXBzZS5lc21mLnNhbW1fY2hhcmFjdGVyaXN0aWNfMi4xLjBfQm9vbGVhbiINCiAgICB9LA0KICAgICJsYXN0TWlsZWFnZSIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIkdpdmVzIHRoZSBsYXN0IG1pbGVhZ2UsIHdoaWNoIGNhbiBiZSByZWFkIG9uIHRoZSB2ZWhpY2xlIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LmVvbF9zdG9yeV8yLjAuMF9MYXN0TWlsZWFnZSINCiAgICB9LA0KICAgICJkYXRlT2ZTY3JhcHBpbmdHTVQiIDogew0KICAgICAgImRlc2NyaXB0aW9uIiA6ICJHaXZlcyB0aGUgZGF0ZSBvZiBzY3JhcHBpbmcgb2YgdGhlIHZlaGljbGUgb3IgcGFydCBpbiBHTVQgdGltZSB6b25lIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9vcmcuZWNsaXBzZS5lc21mLnNhbW1fY2hhcmFjdGVyaXN0aWNfMi4xLjBfVGltZXN0YW1wIg0KICAgIH0sDQogICAgInNwYXJlUGFydFF1YWxpdHkiIDogew0KICAgICAgImRlc2NyaXB0aW9uIiA6ICJJbmRpY2F0ZXMgdGhlIHF1YWxpdHkgb2YgYSBzcGFyZSBwYXJ0IiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LmVvbF9zdG9yeV8yLjAuMF9TcGFyZVBhcnRRdWFsaXR5Ig0KICAgIH0sDQogICAgImRhdGVPZkRpc3NhbWJseUdNVCIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIkdpdmVzIHRoZSBkYXRlIG9mIGRpc3NhbWJseSBvZiB0aGUgcGFydCBpbiBHTVQgdGltZSB6b25lIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9vcmcuZWNsaXBzZS5lc21mLnNhbW1fY2hhcmFjdGVyaXN0aWNfMi4xLjBfVGltZXN0YW1wIg0KICAgIH0NCiAgfSwNCiAgInJlcXVpcmVkIiA6IFsgImRpc2Fzc2VtYmx5U3RhdHVzIiwgImhlYWx0aFN0YXR1cyIsICJyZWN5Y2xpbmdTdGF0dXMiLCAiZGF0ZU9mUmVjZXB0aW9uR01UIiwgImNlcnRpZmljYXRlT2ZEZXN0cnVjdGlvbiIgXQ0KfQ==
      # urn:samm:io.catenax.esr_certificates.esr_certificate:1.0.1#EsrCertificate
      dXJuOnNhbW06aW8uY2F0ZW5heC5lc3JfY2VydGlmaWNhdGVzLmVzcl9jZXJ0aWZpY2F0ZToxLjAuMSNFc3JDZXJ0aWZpY2F0ZQ: 
      # urn:samm:io.catenax.esr_certificates.esr_certificate_state_statistic:1.0.1#EsrCertificateStateStatistic
      dXJuOnNhbW06aW8uY2F0ZW5heC5lc3JfY2VydGlmaWNhdGVzLmVzcl9jZXJ0aWZpY2F0ZV9zdGF0ZV9zdGF0aXN0aWM6MS4wLjEjRXNyQ2VydGlmaWNhdGVTdGF0ZVN0YXRpc3RpYw: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIlN0YXRlIHN0YXRpc3RpYyBmb3IgYW4gRW52aXJvbm1lbnRhbCBhbmQgU29jaWFsIFJlc3BvbnNpYmlsaXR5IChFU1IpIGNlcnRpZmljYXRlIiwNCiAgInR5cGUiIDogIm9iamVjdCIsDQogICJjb21wb25lbnRzIiA6IHsNCiAgICAic2NoZW1hcyIgOiB7DQogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC5lc3JfY2VydGlmaWNhdGVzLmVzcl9jZXJ0aWZpY2F0ZV9zdGF0ZV9zdGF0aXN0aWNfMS4wLjFfQ2VydGZpY2F0ZU5hbWUiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTdHJpbmcgd2l0aG91dCBsYW5ndWFnZSB0YWdzIiwNCiAgICAgICAgImVudW0iIDogWyAiSVNPIDE0MDAxIiBdDQogICAgICB9LA0KICAgICAgInVybl9iYW1tX2lvLmNhdGVuYXguZXNyX2NlcnRpZmljYXRlcy5lc3JfY2VydGlmaWNhdGVfc3RhdGVfc3RhdGlzdGljXzEuMC4xX0NlcnRpZmljYXRlc1dpdGhTdGF0ZVZhbHVlIiA6IHsNCiAgICAgICAgInR5cGUiIDogIm51bWJlciIsDQogICAgICAgICJtaW5pbXVtIiA6IDANCiAgICAgIH0sDQogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC5lc3JfY2VydGlmaWNhdGVzLmVzcl9jZXJ0aWZpY2F0ZV9zdGF0ZV9zdGF0aXN0aWNfMS4wLjFfQ2VydGlmaWNhdGVTdGF0ZVN0YXRpc3RpYyIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJvYmplY3QiLA0KICAgICAgICAicHJvcGVydGllcyIgOiB7DQogICAgICAgICAgImNlcnRpZmljYXRlc1dpdGhTdGF0ZVZhbGlkIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiTnVtYmVyIG9mIGNlcnRpZmljYXRlcyB3aXRoIHN0YXRlIHZhbGlkIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LmVzcl9jZXJ0aWZpY2F0ZXMuZXNyX2NlcnRpZmljYXRlX3N0YXRlX3N0YXRpc3RpY18xLjAuMV9DZXJ0aWZpY2F0ZXNXaXRoU3RhdGVWYWx1ZSINCiAgICAgICAgICB9LA0KICAgICAgICAgICJjZXJ0aWZpY2F0ZXNXaXRoU3RhdGVJbnZhbGlkIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiTnVtYmVyIG9mIGNlcnRpZmljYXRlcyB3aXRoIHN0YXRlIGludmFsaWQiLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXguZXNyX2NlcnRpZmljYXRlcy5lc3JfY2VydGlmaWNhdGVfc3RhdGVfc3RhdGlzdGljXzEuMC4xX0NlcnRpZmljYXRlc1dpdGhTdGF0ZVZhbHVlIg0KICAgICAgICAgIH0sDQogICAgICAgICAgImNlcnRpZmljYXRlc1dpdGhTdGF0ZVVua25vd24iIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJOdW1iZXIgb2YgY2VydGlmaWNhdGVzIHdpdGggc3RhdGUgdW5rbm93biIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC5lc3JfY2VydGlmaWNhdGVzLmVzcl9jZXJ0aWZpY2F0ZV9zdGF0ZV9zdGF0aXN0aWNfMS4wLjFfQ2VydGlmaWNhdGVzV2l0aFN0YXRlVmFsdWUiDQogICAgICAgICAgfSwNCiAgICAgICAgICAiY2VydGlmaWNhdGVzV2l0aFN0YXRlRXhjZXB0aW9uYWwiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJOdW1iZXIgb2YgY2VydGlmaWNhdGVzIHdpdGggc3RhdGUgZXhjZXB0aW9uYWwiLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXguZXNyX2NlcnRpZmljYXRlcy5lc3JfY2VydGlmaWNhdGVfc3RhdGVfc3RhdGlzdGljXzEuMC4xX0NlcnRpZmljYXRlc1dpdGhTdGF0ZVZhbHVlIg0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgInJlcXVpcmVkIiA6IFsgImNlcnRpZmljYXRlc1dpdGhTdGF0ZVZhbGlkIiwgImNlcnRpZmljYXRlc1dpdGhTdGF0ZUludmFsaWQiLCAiY2VydGlmaWNhdGVzV2l0aFN0YXRlVW5rbm93biIsICJjZXJ0aWZpY2F0ZXNXaXRoU3RhdGVFeGNlcHRpb25hbCIgXQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgInByb3BlcnRpZXMiIDogew0KICAgICJjZXJ0aWZpY2F0ZU5hbWUiIDogew0KICAgICAgImRlc2NyaXB0aW9uIiA6ICJOYW1lIG9mIHRoZSBFbnZpcm9ubWVudGFsIGFuZCBTb2NpYWwgUmVzcG9uc2liaWxpdHkgKEVTUikgY2VydGlmaWNhdGUiLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXguZXNyX2NlcnRpZmljYXRlcy5lc3JfY2VydGlmaWNhdGVfc3RhdGVfc3RhdGlzdGljXzEuMC4xX0NlcnRmaWNhdGVOYW1lIg0KICAgIH0sDQogICAgImNlcnRpZmljYXRlU3RhdGVTdGF0aXN0aWMiIDogew0KICAgICAgImRlc2NyaXB0aW9uIiA6ICJFbnZpcm9ubWVudGFsIGFuZCBTb2NpYWwgUmVzcG9uc2liaWxpdHkgKEVTUikgY2VydGlmaWNhdGUgc3RhdGUgc3RhdGlzdGljIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LmVzcl9jZXJ0aWZpY2F0ZXMuZXNyX2NlcnRpZmljYXRlX3N0YXRlX3N0YXRpc3RpY18xLjAuMV9DZXJ0aWZpY2F0ZVN0YXRlU3RhdGlzdGljIg0KICAgIH0NCiAgfSwNCiAgInJlcXVpcmVkIiA6IFsgImNlcnRpZmljYXRlTmFtZSIsICJjZXJ0aWZpY2F0ZVN0YXRlU3RhdGlzdGljIiBdDQp9
      # urn:samm:io.catenax.fleet.diagnostic_data:2.0.0#DiagnosticData
      dXJuOnNhbW06aW8uY2F0ZW5heC5mbGVldC5kaWFnbm9zdGljX2RhdGE6Mi4wLjAjRGlhZ25vc3RpY0RhdGE: 
      # urn:samm:io.catenax.material_for_homologation:2.0.0#MaterialForHomologation
      dXJuOnNhbW06aW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uOjIuMC4wI01hdGVyaWFsRm9ySG9tb2xvZ2F0aW9u: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIk1vZGVsIHRvIGRlcGljdCBtYXRlcmlhbHMgdGhhdCBkZXNjcmliZSBhbmQgY2FsY3VsYXRlIHRoZSByZWN5Y2xpbmcgcXVvdGEgZm9yIHRoZSBob21vbG9nYXRpb24gb2YgYSB2ZWhpY2xlIHR5cGUuIiwNCiAgInR5cGUiIDogIm9iamVjdCIsDQogICJjb21wb25lbnRzIiA6IHsNCiAgICAic2NoZW1hcyIgOiB7DQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uXzIuMC4wX0l0ZW1OdW1iZXIxVHJhaXQiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDaGFyYWN0ZXJpc3RpYyB0byBkZXNjcmliZSB0aGUgaW5kaXZpZHVhbCBjb21wb25lbnQgdG8gd2hpY2ggdGhlIG1hdGVyaWFscyBiZWxvbmcuIiwNCiAgICAgICAgIm1heExlbmd0aCIgOiAyMDANCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uXzIuMC4wX1NoYXJlQ2hhcmFjdGVyaXN0aWMiIDogew0KICAgICAgICAidHlwZSIgOiAibnVtYmVyIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDaGFyYWN0ZXJpc3RpYyB0byByZXByZXNlbnQgdGhlIHByb3BvcnRpb24gb2YgdGhlIG1hdGVyaWFsLiINCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uXzIuMC4wX01haW5Hcm91cFRyYWl0MSIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNoYXJhY3RlcmlzdGljIHRvIGRlc2NyaWJlIHRoZSBtYWluIGdyb3VwIGNsYXNzaWZpY2F0aW9uIG9mIHRoZSBWREEgc3RhbmRhcmQgMjMxLTEwLiIsDQogICAgICAgICJtYXhMZW5ndGgiIDogMg0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4Lm1hdGVyaWFsX2Zvcl9ob21vbG9nYXRpb25fMi4wLjBfU3ViZ3JvdXBUcmFpdDEiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDaGFyYWN0ZXJpc3RpYyB0byBkZXNjcmliZSB0aGUgZmlyc3Qgc3ViZ3JvdXAgY2xhc3NpZmljYXRpb24gb2YgdGhlIFZEQSBzdGFuZGFyZCAyMzEtMTEuIiwNCiAgICAgICAgIm1heExlbmd0aCIgOiAzDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXgubWF0ZXJpYWxfZm9yX2hvbW9sb2dhdGlvbl8yLjAuMF9WREFTdGFuZGFyZElkQ2hhcmFjdGVyaXN0aWMiIDogew0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNoYXJhY3RlcmlzdGljIHRvIGRlc2NyaWJlIHRoZSBjbGFzc2lmaWNhdGlvbiBvZiBhIFZEQSBzdGFuZGFyZCBJRC4iLA0KICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwNCiAgICAgICAgInByb3BlcnRpZXMiIDogew0KICAgICAgICAgICJtYWluR3JvdXAiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJNYWluIGdyb3VwIGFjY29yZGluZyB0byBtYXRlcmlhbCBjbGFzc2lmaWNhdGlvbiBWREEgMjMxLTEwLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uXzIuMC4wX01haW5Hcm91cFRyYWl0MSINCiAgICAgICAgICB9LA0KICAgICAgICAgICJzdWJncm91cCIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkZpcnN0IHN1Ymdyb3VwIGFjY29yZGluZyB0byBtYXRlcmlhbCBjbGFzc2lmaWNhdGlvbiBWREEgMjMxLTExLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uXzIuMC4wX1N1Ymdyb3VwVHJhaXQxIg0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgInJlcXVpcmVkIiA6IFsgIm1haW5Hcm91cCIsICJzdWJncm91cCIgXQ0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4Lm1hdGVyaWFsX2Zvcl9ob21vbG9nYXRpb25fMi4wLjBfTmFtZVRyYWl0MSIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNoYXJhY3RlcmlzdGljIHRvIGRlc2lnbmF0ZSB0aGUgbWF0ZXJpYWwuIiwNCiAgICAgICAgIm1heExlbmd0aCIgOiA1MA0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4Lm1hdGVyaWFsX2Zvcl9ob21vbG9nYXRpb25fMi4wLjBfU3RhbmRhcmRUcmFpdDEiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJEZXNjcmliZXMgdGhlIHN0YW5kYXJkIGluIHdoaWNoIHRoZSBtYXRlcmlhbCBpcyBsaXN0ZWQuIiwNCiAgICAgICAgIm1heExlbmd0aCIgOiAyMA0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4Lm1hdGVyaWFsX2Zvcl9ob21vbG9nYXRpb25fMi4wLjBfTWF0ZXJpYWxOdW1iZXJUcmFpdDEiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDaGFyYWN0ZXJpc3RpYyB0byByZXByZXNlbnQgdGhlIG51bWJlciBvZiB0aGUgbWF0ZXJpYWwgaW4gdGhlIHN0YW5kYXJkLiIsDQogICAgICAgICJtYXhMZW5ndGgiIDogMjANCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uXzIuMC4wX01hdGVyaWFsRm9ySG9tb2xvZ2F0aW9uRW50aXR5IiA6IHsNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJFbnRpdHkgdGhhdCByZXByZXNlbnRzIHRoZSBtYXRlcmlhbCB0aGF0IGRlc2NyaWJlcyBhbmQgY2FsY3VsYXRlcyB0aGUgcmVjeWNsaW5nIHF1b3RhIGZvciB0aGUgaG9tb2xvZ2F0aW9uIG9mIGEgdmVoaWNsZSB0eXBlLiIsDQogICAgICAgICJ0eXBlIiA6ICJvYmplY3QiLA0KICAgICAgICAicHJvcGVydGllcyIgOiB7DQogICAgICAgICAgIml0ZW1OdW1iZXIiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJJbmRpdmlkdWFsIGNvbXBvbmVudCB0byB3aGljaCB0aGUgbWF0ZXJpYWxzIGJlbG9uZyAobm8gbWF0ZXJpYWxzIGFyZSBhc3NpZ25lZCB0byBub2RlcykuIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4Lm1hdGVyaWFsX2Zvcl9ob21vbG9nYXRpb25fMi4wLjBfSXRlbU51bWJlcjFUcmFpdCINCiAgICAgICAgICB9LA0KICAgICAgICAgICJzaGFyZSIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlByb3BvcnRpb24gb2YgdGhlIG1hdGVyaWFsLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uXzIuMC4wX1NoYXJlQ2hhcmFjdGVyaXN0aWMiDQogICAgICAgICAgfSwNCiAgICAgICAgICAidmRhU3RhbmRhcmRJZCIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkdlcm1hbiBxdWFsaXR5IG1hbmFnZW1lbnQgc3lzdGVtIHN0YW5kYXJkLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uXzIuMC4wX1ZEQVN0YW5kYXJkSWRDaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9LA0KICAgICAgICAgICJuYW1lIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzaWduYXRpb24gb2YgdGhlIG1hdGVyaWFsLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uXzIuMC4wX05hbWVUcmFpdDEiDQogICAgICAgICAgfSwNCiAgICAgICAgICAic3RhbmRhcmQiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTdGFuZGFyZCBpbiB3aGljaCB0aGUgbWF0ZXJpYWwgaXMgbGlzdGVkLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uXzIuMC4wX1N0YW5kYXJkVHJhaXQxIg0KICAgICAgICAgIH0sDQogICAgICAgICAgIm1hdGVyaWFsTnVtYmVyIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIG51bWJlciBvZiB0aGUgbWF0ZXJpYWwgaW4gdGhlIHN0YW5kYXJkLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uXzIuMC4wX01hdGVyaWFsTnVtYmVyVHJhaXQxIg0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgInJlcXVpcmVkIiA6IFsgIml0ZW1OdW1iZXIiLCAic2hhcmUiLCAidmRhU3RhbmRhcmRJZCIsICJuYW1lIiwgInN0YW5kYXJkIiwgIm1hdGVyaWFsTnVtYmVyIiBdDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXgubWF0ZXJpYWxfZm9yX2hvbW9sb2dhdGlvbl8yLjAuMF9NYXRlcmlhbEZvckhvbW9sb2dhdGlvbkNoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDaGFyYWN0ZXJpc3RpYyB0byBkZXNjcmliZSBhIHNldCBvZiBtYXRlcmlhbHMgdGhhdCBkZXNjcmliZSBhbmQgY2FsY3VsYXRlIHRoZSByZWN5Y2xpbmcgcXVvdGEgZm9yIHRoZSBob21vbG9nYXRpb24gb2YgYSB2ZWhpY2xlIHR5cGUuIiwNCiAgICAgICAgInR5cGUiIDogImFycmF5IiwNCiAgICAgICAgIml0ZW1zIiA6IHsNCiAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uXzIuMC4wX01hdGVyaWFsRm9ySG9tb2xvZ2F0aW9uRW50aXR5Ig0KICAgICAgICB9LA0KICAgICAgICAidW5pcXVlSXRlbXMiIDogdHJ1ZQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgInByb3BlcnRpZXMiIDogew0KICAgICJtYXRlcmlhbEZvckhvbW9sb2dhdGlvbiIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIlByb3BlcnR5IHRoYXQgcmVmZXJlbmNlcyB0aGUgbWF0ZXJpYWwgdGhhdCBkZXNjcmliZXMgYW5kIGNhbGN1bGF0ZSB0aGUgcmVjeWNsaW5nIHF1b3RhIGZvciB0aGUgaG9tb2xvZ2F0aW9uIG9mIGEgdmVoaWNsZSB0eXBlLiIsDQogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5tYXRlcmlhbF9mb3JfaG9tb2xvZ2F0aW9uXzIuMC4wX01hdGVyaWFsRm9ySG9tb2xvZ2F0aW9uQ2hhcmFjdGVyaXN0aWMiDQogICAgfQ0KICB9LA0KICAicmVxdWlyZWQiIDogWyAibWF0ZXJpYWxGb3JIb21vbG9nYXRpb24iIF0NCn0=
      # urn:samm:io.catenax.battery.product_description:1.0.1#ProductDescription
      dXJuOnNhbW06aW8uY2F0ZW5heC5iYXR0ZXJ5LnByb2R1Y3RfZGVzY3JpcHRpb246MS4wLjEjUHJvZHVjdERlc2NyaXB0aW9u: 
      # urn:samm:io.catenax.vehicle.product_description:1.0.0#ProductDescription
      dXJuOnNhbW06aW8uY2F0ZW5heC52ZWhpY2xlLnByb2R1Y3RfZGVzY3JpcHRpb246MS4wLjAjUHJvZHVjdERlc2NyaXB0aW9u: 

  bpdm:
    url: https://partners-pool.int.demo.catena-x.net
  minioUser: <path:traceability-irs/data/dev/minio#minioUser>
  minioPassword: <path:traceability-irs/data/dev/minio#minioPassword>
  oauth2:
    clientTokenUri: <path:traceability-irs/data/dev/oauth2#tokenUri>
    semantics:
      clientId: <path:traceability-irs/data/oauth2/semantics#clientId>
      clientSecret: <path:traceability-irs/data/oauth2/semantics#clientSecret>
    discovery:
      clientId: <path:traceability-irs/data/oauth2/discovery#clientId>
      clientSecret: <path:traceability-irs/data/oauth2/discovery#clientSecret>
    bpdm:
      clientId: <path:traceability-irs/data/oauth2/bpdm#clientId>
      clientSecret: <path:traceability-irs/data/oauth2/bpdm#clientSecret>
  edc:
    submodel:
      request:
        ttl: PT2M
    controlplane:
      endpoint:
        data: https://irs-consumer-controlplane.dev.demo.catena-x.net/management
      request:
        ttl: PT5M
      apikey:
        secret: <path:traceability-irs/data/dev/controlplane#apiKey>

  resources:
    limits:
      cpu: 1.5
      memory: 1.5Gi
    requests:
      cpu: 100m
      memory: 1.5Gi


  #######################
  # Minio Configuration #
  #######################
  minio:
    rootUser: <path:traceability-irs/data/dev/minio#minioUser>
    rootPassword: <path:traceability-irs/data/dev/minio#minioPassword>
    serviceAccount:
      name: "irs-dev-minio-sa"

  #########################
  # Grafana Configuration #
  #########################
  grafana:
    resources:
      requests:
        cpu: 50m
        memory: 256Mi
      limits:
        cpu: 200m
        memory: 256Mi
    enabled: true
    ingress:
      enabled: true
      hosts:
        - "irs-grafana.dev.demo.catena-x.net"
      tls:
        - hosts:
            - "irs-grafana.dev.demo.catena-x.net"
          secretName: tls-secret

    user: <path:traceability-irs/data/dev/grafana#username>
    password: <path:traceability-irs/data/dev/grafana#password>

  ############################
  # Prometheus Configuration #
  ############################
  prometheus:
    enabled: true
    extraScrapeConfigs: |
      - job_name: 'spring-actuator'
        metrics_path: '/actuator/prometheus'
        scrape_interval: 60s
        static_configs:
          - targets: [ '{{ .Release.Name }}-item-relationship-service:4004' ]

      - job_name: 'minio-actuator'
        metrics_path: /minio/v2/metrics/cluster
        static_configs:
          - targets: [ '{{ .Release.Name }}-minio:9000' ]


tractusx-connector:
  nameOverride: irs-edc-consumer
  fullnameOverride: irs-edc-consumer
  install:
    postgresql: false
    vault: false
  participant:
    id: <path:traceability-irs/data/dev/controlplane#participantId>

  iatp:
    id: <path:traceability-irs/data/dev/controlplane#DID>
    # -- Configures the trusted issuers for this runtime
    # ATTENTION: NOT YET WORKING FOR 0.7.0 chart
    trustedIssuers:
      - <path:traceability-irs/data/dev/controlplane#trustedIssuer>
    sts:
      dim:
        url: <path:traceability-irs/data/dev/controlplane#dimUrl>
      oauth:
        token_url: <path:traceability-irs/data/dev/controlplane#iatp.oauth.tokenurl>
        client:
          id: <path:traceability-irs/data/dev/controlplane#dimClientId>
          secret_alias: dim-secret-dev

  controlplane:
    ingresses:
      - enabled: true
        hostname: "irs-consumer-controlplane.dev.demo.catena-x.net"
        annotations:
          nginx.ingress.kubernetes.io/ssl-passthrough: "false"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        endpoints:
          - protocol
          - management
        tls:
          enabled: true
          secretName: tls-secret

    bdrs:
      # time that a cached BPN/DID resolution map is valid in seconds, default is 10 min
      cache_validity_seconds: 600
      server:
        # URL of the BPN/DID Resolution Service - required:
        url: <path:traceability-irs/data/dev/controlplane#bdrsUrl>

    endpoints:
      management:
        authKey: <path:traceability-irs/data/dev/controlplane#apiKey>  # -- authentication key, must be attached to each 'X-Api-Key' request header

    resources:
      limits:
        cpu: 1.5
        memory: 3Gi
      requests:
        cpu: 100m
        memory: 3Gi

  dataplane:
    ingresses:
      - enabled: true
        hostname: "irs-consumer-dataplane.dev.demo.catena-x.net"
        annotations:
          nginx.ingress.kubernetes.io/ssl-passthrough: "false"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        endpoints:
          - public
        className: "nginx"
        tls:
          enabled: true
          secretName: tls-secret

    token:
      signer:
        # alias under which the private key is stored in the vault (JWK or PEM format)
        privatekey_alias: irs-dev-daps-cert-consumer-key
      verifier:
        # alias under which the public key is stored in the vault, that belongs to the private key ("privatekey_alias", JWK or PEM format)
        publickey_alias: irs-dev-daps-cert-consumer

    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 512Mi

  ################################
  # EDC Vault/DAPS Configuration #
  ################################
  vault:
    hashicorp:
      url: "https://irs-vault.dev.demo.catena-x.net"
      token: "<path:traceability-irs/data/vault#vaultToken>"
      timeout: 30
      healthCheck:
        enabled: true
        standbyOk: true
      paths:
        secret: /v1/traceability-irs
        health: /v1/sys/health
    secretNames:
      transferProxyTokenSignerPrivateKey: irs-dev-daps-cert-consumer-key
      transferProxyTokenSignerPublicKey: irs-dev-daps-cert-consumer
      transferProxyTokenEncryptionAesKey: test-edc-encryption-key

  ##################################
  # EDC Postgres Configuration #
  ##################################
  postgresql:
    enabled: true
    auth:
      username: "<path:traceability-irs/data/dev/controlplane#databaseuser>"
      password: "<path:traceability-irs/data/dev/controlplane#databasepassword>"
    username: "<path:traceability-irs/data/dev/controlplane#databaseuser>"
    password: "<path:traceability-irs/data/dev/controlplane#databasepassword>"
    jdbcUrl: "jdbc:postgresql://irs-edc-consumer-postgresql:5432/edc"

##############################
# EDC Postgres Configuration #
##############################
# EDC chart do not support multiple postgres instances in the same namespace at the moment.
# Enable this to use the postgres dependency for when you want to deploy multiple EDC instances in one namespace
postgresql:
  enabled: true
edc-postgresql:
  nameOverride: irs-edc-consumer-postgresql
  fullnameOverride: irs-edc-consumer-postgresql
  primary:
    persistence:
      enabled: false
  auth:
    database: edc
    username: <path:traceability-irs/data/dev/controlplane#databaseuser>
    postgresPassword: <path:traceability-irs/data/dev/controlplane#databasepassword>
    password: <path:traceability-irs/data/dev/controlplane#databasepassword>
